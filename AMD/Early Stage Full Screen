import cv2
import numpy as np
import time
import pygame
from pygame.locals import *

# Enable GPU acceleration in OpenCV
cv2.setUseOptimized(True)
cv2.ocl.setUseOpenCL(True)

def apply_realistic_macular_pucker_effect(image):
    h, w = image.shape[:2]
    center_x, center_y = w // 2, h // 2

    # Step 1: Create Gradual Blurring Mask
    y_indices, x_indices = np.meshgrid(np.arange(h), np.arange(w), indexing='ij')
    distance_from_center = np.sqrt((x_indices - center_x)**2 + (y_indices - center_y)**2)

    # Use a smaller sigma for quicker falloff
    sigma = w // 4
    blur_mask = np.exp(-(distance_from_center**2) / (2 * sigma**2)).astype(np.float32)
    blur_mask = cv2.normalize(blur_mask, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX)

    # Step 2: Apply Separable Gaussian Blur
    gaussian_kernel = cv2.getGaussianKernel(31, 0)
    heavy_blur = cv2.sepFilter2D(image, -1, gaussian_kernel, gaussian_kernel)

    # Step 3: Blend with Gradual Mask
    blur_mask_3d = cv2.merge([blur_mask] * 3)
    blurred_part = cv2.multiply(heavy_blur.astype(np.float32), blur_mask_3d)
    original_part = cv2.multiply(image.astype(np.float32), 1 - blur_mask_3d)
    final_img = cv2.add(blurred_part, original_part).astype(np.uint8)

    return final_img

def main():
    # Initialize Pygame
    pygame.init()
    screen = pygame.display.set_mode((0, 0), FULLSCREEN)
    pygame.display.set_caption('Macular Pucker Effect')

    # Get screen dimensions
    screen_info = pygame.display.Info()
    screen_w = screen_info.current_w
    screen_h = screen_info.current_h

    # Open webcam
    cap = cv2.VideoCapture(0)

    # Set resolution to 720p
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

    if not cap.isOpened():
        print("Error: Unable to access the webcam.")
        return

    frame_count = 0
    start_time = time.time()

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Unable to read frame from the webcam.")
            break

        # Apply the macular pucker effect
        processed_frame = apply_realistic_macular_pucker_effect(frame)

        # Convert the frame from BGR (OpenCV) to RGB (Pygame)
        processed_frame = cv2.cvtColor(processed_frame, cv2.COLOR_BGR2RGB)

        # Resize the frame to match the screen resolution
        processed_frame = cv2.resize(processed_frame, (screen_w, screen_h))

        # Convert the frame to a Pygame surface
        processed_frame = np.rot90(processed_frame)  # Rotate the frame if necessary
        processed_frame = pygame.surfarray.make_surface(processed_frame)

        # Display the processed frame in Pygame
        screen.blit(processed_frame, (0, 0))
        pygame.display.flip()

        frame_count += 1

        # Break the loop if 'q' is pressed or Pygame window is closed
        for event in pygame.event.get():
            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                cap.release()
                pygame.quit()
                return

    # Calculate and display FPS
    end_time = time.time()
    total_time = end_time - start_time
    fps = frame_count / total_time
    print(f"Processed {frame_count} frames in {total_time:.2f} seconds. Overall FPS: {fps:.2f}")

    # Release resources
    cap.release()
    pygame.quit()

if __name__ == "__main__":
    main()
