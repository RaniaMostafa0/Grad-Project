using UnityEngine;
using UnityEngine.UI;

public class RealTimeWebcamDisplay : MonoBehaviour
{
    public RawImage displayImage; // Assign in Unity Inspector (UI RawImage)
    public GameObject webcamCube; // Assign in Unity Inspector (3D Cube)
    public Button startButton; // Assign in Unity Inspector (Start Button)
    public Camera mainCamera; // Assign in Unity Inspector (Main Camera)
    public GameObject backgroundImage; // Assign in Unity Inspector (Background Image)

    private WebCamTexture webcamTexture;
    private Renderer cubeRenderer;
    private bool effectActive = false;

    // Smooth transition variables
    private float updateInterval = 1f / 30f; // Target update rate (30 FPS)
    private float lastUpdateTime = 0f; // Time of last update

    void Start()
    {
        if (startButton == null)
        {
            startButton = GameObject.Find("StartButton").GetComponent<Button>(); // Auto-find the button
        }

        if (startButton != null)
        {
            startButton.onClick.AddListener(OnStartButtonClick);
        }
        else
        {
            Debug.LogError("Start Button is still missing! Check Hierarchy.");
        }

        if (mainCamera == null)
        {
            mainCamera = Camera.main; // Default to the main camera if not assigned
        }

        // Check if backgroundImage is assigned, if not log a warning
        if (backgroundImage == null)
        {
            Debug.LogWarning("Background Image not assigned! The image won't disappear.");
        }
    }

    void OnStartButtonClick()
    {
        if (!effectActive)
        {
            StartWebcamDisplay();
            effectActive = true;

            // Hide UI elements for immersion
            startButton.gameObject.SetActive(false); // Hide Start Button

            // Hide the background image
            if (backgroundImage != null)
            {
                backgroundImage.SetActive(false); // Disable the background image
            }
        }
    }

    void StartWebcamDisplay()
    {
        WebCamDevice[] devices = WebCamTexture.devices;
        webcamTexture = new WebCamTexture(devices.Length > 1 ? devices[1].name : devices[0].name);

        // Set webcam resolution for higher quality but balanced performance
        webcamTexture.requestedWidth = 854; // Adjust resolution (lower for performance)
        webcamTexture.requestedHeight = 480;
        webcamTexture.requestedFPS = 30; // Lower FPS for performance
        webcamTexture.Play();

        if (displayImage != null)
        {
            // Assign the webcam texture directly to the RawImage component
            displayImage.texture = webcamTexture;
        }

        if (webcamCube != null)
        {
            cubeRenderer = webcamCube.GetComponent<Renderer>();
            cubeRenderer.material.mainTexture = webcamTexture;
        }

        effectActive = true;

        // Adjust camera settings for better quality and fix zoom
        AdjustCameraSettings();
    }

    void AdjustCameraSettings()
    {
        if (mainCamera != null)
        {
            // Adjust the camera's Field of View (FOV) to prevent zooming
            mainCamera.fieldOfView = 90; // You can adjust this value as needed

            // Set the Near and Far Clip Planes to avoid clipping
            mainCamera.nearClipPlane = 0.1f;
            mainCamera.farClipPlane = 1000f;
        }
    }

    void Update()
    {
        if (effectActive)
        {
            // Check if enough time has passed to update the textures
            if (Time.time - lastUpdateTime >= updateInterval)
            {
                // Only update the textures every target interval
                if (webcamTexture.didUpdateThisFrame)
                {
                    if (displayImage != null)
                    {
                        displayImage.texture = webcamTexture;
                    }

                    if (webcamCube != null)
                    {
                        cubeRenderer.material.mainTexture = webcamTexture;
                    }

                    // Update the time for the next frame
                    lastUpdateTime = Time.time;
                }
            }
        }
    }
}
