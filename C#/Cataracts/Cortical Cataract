using UnityEngine;
using UnityEngine.UI;
using OpenCvSharp;

public class ButtonController : MonoBehaviour
{
    public GameObject webcamSphere;
    public RawImage displayImage;
    public Button startButton;

    private WebCamTexture webcamTexture;
    private Renderer sphereRenderer;
    private Texture2D outputTexture;
    private Mat frameMat, grayMat, mask, processedFrame;
    private bool effectActive = false;

    void Start()
    {
        startButton.onClick.AddListener(OnStartButtonClick);
    }

    void OnStartButtonClick()
    {
        if (!effectActive)
        {
            StartCataractEffect();
            effectActive = true;
            displayImage.gameObject.SetActive(false);
            startButton.gameObject.SetActive(false);
        }
    }

    void StartCataractEffect()
    {
        WebCamDevice[] devices = WebCamTexture.devices;
        webcamTexture = new WebCamTexture(devices.Length > 1 ? devices[1].name : devices[0].name);
        webcamTexture.Play();

        outputTexture = new Texture2D(webcamTexture.width, webcamTexture.height, TextureFormat.RGBA32, false);

        if (webcamSphere != null)
        {
            sphereRenderer = webcamSphere.GetComponent<Renderer>();
            sphereRenderer.material.SetTexture("_BaseMap", outputTexture);
        }

        frameMat = new Mat(webcamTexture.height, webcamTexture.width, MatType.CV_8UC3);
        grayMat = new Mat();
        mask = new Mat();
        processedFrame = new Mat();

        // Instead of InvokeRepeating, use Update() for real-time FPS
    }

    void Update()
    {
        if (effectActive && webcamTexture.didUpdateThisFrame)
        {
            ProcessFrame();
        }
    }

    void ProcessFrame()
    {
        // Optimize: Avoid GetPixels(), use direct GPU access
        var colors = webcamTexture.GetPixels32();
        outputTexture.SetPixels32(colors);
        outputTexture.Apply();

        // Convert Texture to OpenCV Mat (Fast method)
        frameMat = OpenCvSharp.Unity.TextureToMat(outputTexture);

        // Convert to grayscale
        Cv2.CvtColor(frameMat, grayMat, ColorConversionCodes.BGR2GRAY);

        // Thresholding to create mask
        Cv2.Threshold(grayMat, mask, 200, 255, ThresholdTypes.Binary);

        // Optimize cataract effect
        ApplyGlareAndHalo(frameMat, mask, processedFrame);
        DecreaseContrast(processedFrame);

        // Convert Mat back to Texture (without reallocation)
        OpenCvSharp.Unity.MatToTexture(processedFrame, outputTexture);

        // Apply updated texture to sphere
        if (webcamSphere != null)
        {
            sphereRenderer.material.SetTexture("_BaseMap", outputTexture);
        }
    }

    void ApplyGlareAndHalo(Mat image, Mat mask, Mat output)
    {
        Mat mask3Channel = new Mat();
        Cv2.Merge(new Mat[] { mask, mask, mask }, mask3Channel);

        // Reduce Gaussian blur kernel (Less processing time)
        Cv2.GaussianBlur(mask3Channel, mask3Channel, new Size(3, 3), 0);

        // Optimize blending (Lower weight for performance)
        Cv2.AddWeighted(image, 1, mask3Channel, 0.4, 0, output);

        // White glare effect
        Mat glareOverlay = new Mat(image.Size(), image.Type(), new Scalar(180, 180, 180));
        Cv2.AddWeighted(output, 0.7, glareOverlay, 0.3, 0, output);
    }

    void DecreaseContrast(Mat image)
    {
        Scalar meanColor = Cv2.Mean(image);
        Mat meanMat = new Mat(image.Size(), image.Type(), meanColor);
        Cv2.AddWeighted(image, 0.8, meanMat, 0.2, 0, image);
    }
}
