using UnityEngine;
using UnityEngine.UI;
using OpenCVForUnity.CoreModule;
using OpenCVForUnity.ImgprocModule;
using OpenCVForUnity.UnityUtils;

public class RealTimeWebcamDisplay : MonoBehaviour
{
    public RawImage displayImage;             // Assign in Inspector (UI RawImage)
    public GameObject webcamCube;             // Assign in Inspector (3D Cube)
    public Button startButton;                // Assign in Inspector (Cortical Cataract Button)
    public Camera mainCamera;                 // Assign in Inspector
    public GameObject backgroundImage;        // Assign in Inspector
    public Slider intensitySlider;            // Assign in Inspector (UI Slider)

    private WebCamTexture webcamTexture;
    private Renderer cubeRenderer;
    private Texture2D outputTexture;

    private Mat webcamMat;
    private Mat processedMat;

    private bool effectActive = false;
    private bool applyBlurHaze = false;

    private float updateInterval = 1f / 30f;
    private float lastUpdateTime = 0f;

    void Start()
    {
        if (startButton == null)
        {
            startButton = GameObject.Find("StartButton")?.GetComponent<Button>();
        }

        if (startButton != null)
        {
            startButton.onClick.AddListener(OnStartButtonClick);
        }
        else
        {
            Debug.LogError("Start Button is missing! Check the UI.");
        }

        if (mainCamera == null)
        {
            mainCamera = Camera.main;
        }

        if (intensitySlider != null)
        {
            intensitySlider.gameObject.SetActive(false); // Hide slider initially
        }

        if (backgroundImage == null)
        {
            Debug.LogWarning("Background Image not assigned. No UI fade will occur.");
        }
    }

    void OnStartButtonClick()
    {
        if (!effectActive)
        {
            StartWebcamDisplay();
            effectActive = true;
            applyBlurHaze = true;

            if (startButton != null)
            {
                startButton.gameObject.SetActive(false); // Hide start button
            }

            if (backgroundImage != null)
            {
                backgroundImage.SetActive(false); // Hide background
            }

            if (intensitySlider != null)
            {
                intensitySlider.gameObject.SetActive(true); // Show slider
            }
        }
    }

    void StartWebcamDisplay()
    {
        WebCamDevice[] devices = WebCamTexture.devices;
        webcamTexture = new WebCamTexture(devices.Length > 1 ? devices[1].name : devices[0].name);
        webcamTexture.requestedWidth = 854;
        webcamTexture.requestedHeight = 480;
        webcamTexture.requestedFPS = 30;
        webcamTexture.Play();

        outputTexture = new Texture2D(webcamTexture.width, webcamTexture.height, TextureFormat.RGBA32, false);
        webcamMat = new Mat(webcamTexture.height, webcamTexture.width, CvType.CV_8UC4);
        processedMat = new Mat(webcamTexture.height, webcamTexture.width, CvType.CV_8UC4);

        if (displayImage != null)
        {
            displayImage.texture = outputTexture;
        }

        if (webcamCube != null)
        {
            cubeRenderer = webcamCube.GetComponent<Renderer>();
            cubeRenderer.material.mainTexture = outputTexture;
        }

        AdjustCameraSettings();
    }

    void AdjustCameraSettings()
    {
        if (mainCamera != null)
        {
            mainCamera.fieldOfView = 90;
            mainCamera.nearClipPlane = 0.1f;
            mainCamera.farClipPlane = 1000f;
        }
    }

    void Update()
    {
        if (!effectActive || webcamTexture == null || !webcamTexture.didUpdateThisFrame) return;

        if (Time.time - lastUpdateTime >= updateInterval)
        {
            Utils.webCamTextureToMat(webcamTexture, webcamMat);

            float intensity = intensitySlider != null ? intensitySlider.value : 0.5f;

            if (applyBlurHaze)
            {
                ApplyBlurAndHaze(webcamMat, processedMat, intensity);
                Utils.matToTexture2D(processedMat, outputTexture);
            }
            else
            {
                Utils.matToTexture2D(webcamMat, outputTexture);
            }

            lastUpdateTime = Time.time;
        }
    }

    void ApplyBlurAndHaze(Mat inputMat, Mat outputMat, float intensity)
    {
        int maxBlur = 25;
        int blurAmount = Mathf.Clamp((int)(1 + intensity * maxBlur), 1, maxBlur);
        if (blurAmount % 2 == 0) blurAmount += 1;

        Mat blurred = new Mat();
        Imgproc.GaussianBlur(inputMat, blurred, new Size(blurAmount, blurAmount), 0);

        Mat hazeOverlay = new Mat(inputMat.rows(), inputMat.cols(), inputMat.type(), new Scalar(200, 200, 200, 255));
        Core.addWeighted(blurred, 1 - intensity * 0.7f, hazeOverlay, intensity * 0.7f, 0, outputMat);

        blurred.Dispose();
        hazeOverlay.Dispose();
    }

    void OnDestroy()
    {
        if (webcamTexture != null) webcamTexture.Stop();
        if (webcamMat != null) webcamMat.Dispose();
        if (processedMat != null) processedMat.Dispose();
    }
}
