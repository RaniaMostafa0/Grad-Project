using UnityEngine;
using UnityEngine.UI;
using OpenCVForUnity.CoreModule;
using OpenCVForUnity.ImgprocModule;
using OpenCVForUnity.UnityUtils;

public class RealTimeWebcamDisplay : MonoBehaviour
{
    public RawImage displayImage; // Assign in Unity Inspector (UI RawImage)
    public GameObject webcamCube; // Assign in Unity Inspector (3D Cube)
    public Button startButton; // Assign in Unity Inspector (Start Button)
    public Camera mainCamera; // Assign in Unity Inspector (Main Camera)
    public GameObject backgroundImage; // Assign in Unity Inspector (Background Image)

    private WebCamTexture webcamTexture;
    private Renderer cubeRenderer;
    private bool effectActive = false;

    // Smooth transition variables
    private float updateInterval = 1f / 30f; // Target update rate (30 FPS)
    private float lastUpdateTime = 0f; // Time of last update

    // OpenCVForUnity variables
    private Texture2D outputTexture; // Texture to hold the processed webcam feed
    private Mat webcamMat; // OpenCV Mat to hold the webcam feed
    private Mat processedMat; // OpenCV Mat for processed output

    void Start()
    {
        if (startButton == null)
        {
            startButton = GameObject.Find("StartButton").GetComponent<Button>(); // Auto-find the button
        }

        if (startButton != null)
        {
            startButton.onClick.AddListener(OnStartButtonClick);
        }
        else
        {
            Debug.LogError("Start Button is still missing! Check Hierarchy.");
        }

        if (mainCamera == null)
        {
            mainCamera = Camera.main; // Default to the main camera if not assigned
        }

        if (backgroundImage == null)
        {
            Debug.LogWarning("Background Image not assigned! The image won't disappear.");
        }
    }

    void OnStartButtonClick()
    {
        if (!effectActive)
        {
            StartWebcamDisplay();
            effectActive = true;

            // Hide UI elements for immersion
            startButton.gameObject.SetActive(false); // Hide Start Button

            if (backgroundImage != null)
            {
                backgroundImage.SetActive(false); // Disable the background image
            }
        }
    }

    void StartWebcamDisplay()
    {
        WebCamDevice[] devices = WebCamTexture.devices;
        webcamTexture = new WebCamTexture(devices.Length > 1 ? devices[1].name : devices[0].name);

        // Set webcam resolution for higher quality but balanced performance
        webcamTexture.requestedWidth = 854; // Adjust resolution (lower for performance)
        webcamTexture.requestedHeight = 480;
        webcamTexture.requestedFPS = 30; // Lower FPS for performance
        webcamTexture.Play();

        // Initialize OpenCV Mats and Texture
        outputTexture = new Texture2D(webcamTexture.width, webcamTexture.height, TextureFormat.RGBA32, false);
        webcamMat = new Mat(webcamTexture.height, webcamTexture.width, CvType.CV_8UC4); // RGBA format
        processedMat = new Mat(webcamTexture.height, webcamTexture.width, CvType.CV_8UC4);

        if (displayImage != null)
        {
            displayImage.texture = outputTexture; // Assign the processed texture to RawImage
        }

        if (webcamCube != null)
        {
            cubeRenderer = webcamCube.GetComponent<Renderer>();
            cubeRenderer.material.mainTexture = outputTexture; // Assign the processed texture to the cube
        }

        effectActive = true;

        // Adjust camera settings for better quality and fix zoom
        AdjustCameraSettings();
    }

    void AdjustCameraSettings()
    {
        if (mainCamera != null)
        {
            mainCamera.fieldOfView = 90; // Adjust as needed
            mainCamera.nearClipPlane = 0.1f;
            mainCamera.farClipPlane = 1000f;
        }
    }

    void Update()
    {
        if (effectActive && webcamTexture.didUpdateThisFrame)
        {
            if (Time.time - lastUpdateTime >= updateInterval)
            {
                // Convert WebCamTexture to Mat
                Utils.webCamTextureToMat(webcamTexture, webcamMat);

                // Apply a simple OpenCV processing (e.g., convert to grayscale)
                Imgproc.cvtColor(webcamMat, processedMat, Imgproc.COLOR_BGR2GRAY);

                // Convert the processed Mat back to Texture2D
                Utils.matToTexture2D(processedMat, outputTexture);

                // Update the display
                if (displayImage != null)
                {
                    displayImage.texture = outputTexture;
                }

                if (webcamCube != null)
                {
                    cubeRenderer.material.mainTexture = outputTexture;
                }

                lastUpdateTime = Time.time;
            }
        }
    }

    void OnDestroy()
    {
        // Clean up OpenCV Mats and stop the webcam
        if (webcamTexture != null)
        {
            webcamTexture.Stop();
        }
        if (webcamMat != null)
        {
            webcamMat.Dispose();
        }
        if (processedMat != null)
        {
            processedMat.Dispose();
        }
    }
}
