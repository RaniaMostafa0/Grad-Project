using UnityEngine;
using UnityEngine.UI;
using OpenCvSharp;

public class RealTimeWebcamDisplay : MonoBehaviour
{
    public RawImage displayImage; // Assign in Unity Inspector (UI RawImage)
    public GameObject webcamQuad; // Assign in Unity Inspector (Quad)
    public Button startButton; // Assign in Unity Inspector (Start Button)

    private WebCamTexture webcamTexture;
    private Renderer quadRenderer;  // Changed from cubeRenderer to quadRenderer
    private Texture2D outputTexture;
    private Mat frameMat;
    private bool effectActive = false;

    void Start()
    {
        if (startButton == null)
        {
            startButton = GameObject.Find("StartButton").GetComponent<Button>(); // Auto-find the button
        }

        if (startButton != null)
        {
            startButton.onClick.AddListener(OnStartButtonClick);
        }
        else
        {
            Debug.LogError("Start Button is still missing! Check Hierarchy.");
        }
    }

    void OnStartButtonClick()
    {
        if (!effectActive)
        {
            StartWebcamDisplay();
            effectActive = true;

            // Hide UI elements for immersion
            startButton.gameObject.SetActive(false); // Hide Start Button
        }
    }

    void StartWebcamDisplay()
    {
        WebCamDevice[] devices = WebCamTexture.devices;
        webcamTexture = new WebCamTexture(devices.Length > 1 ? devices[1].name : devices[0].name);
        webcamTexture.Play();

        outputTexture = new Texture2D(webcamTexture.width, webcamTexture.height, TextureFormat.RGBA32, false);

        if (webcamQuad != null)
        {
            quadRenderer = webcamQuad.GetComponent<Renderer>();  // Accessing the Quad's Renderer

            if (quadRenderer != null)
            {
                Debug.Log("Quad Renderer found! Assigning texture...");
                quadRenderer.material.SetTexture("_BaseMap", outputTexture);  // Assign texture to the quad
                quadRenderer.material.mainTexture = outputTexture;
            }
            else
            {
                Debug.LogError("Renderer not found on WebcamQuad!");
            }
        }
        else
        {
            Debug.LogError("WebcamQuad not assigned in Inspector!");
        }

        // Pre-allocate Mat
        frameMat = new Mat(webcamTexture.height, webcamTexture.width, MatType.CV_8UC3);

        effectActive = true;
    }

    void Update()
    {
        if (effectActive && webcamTexture.didUpdateThisFrame)
        {
            ProcessFrame();
        }
    }

    void ProcessFrame()
    {
        // Convert webcam image to texture
        var colors = webcamTexture.GetPixels32();
        outputTexture.SetPixels32(colors);
        outputTexture.Apply();

        // Convert to OpenCV Mat and immediately back to Texture2D (no blur)
        frameMat = OpenCvSharp.Unity.TextureToMat(outputTexture);
        OpenCvSharp.Unity.MatToTexture(frameMat, outputTexture);

        // Apply texture to quad
        if (webcamQuad != null)
        {
            quadRenderer.material.SetTexture("_BaseMap", outputTexture);
            quadRenderer.material.mainTexture = outputTexture;
        }
    }
}
