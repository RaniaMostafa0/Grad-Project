import cv2
import numpy as np
import time

# Path to the video
video_path = r"C:\Users\Rania\Downloads\Venice_10.mp4"
output_video_path = r"C:\Users\Rania\Downloads\Processed_Venice_10_optimized.mp4"

# Open the video file
cap = cv2.VideoCapture(video_path)
if not cap.isOpened():
    raise FileNotFoundError(f"Unable to open video at {video_path}. Please check the file path.")

# Get video properties
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
original_fps = cap.get(cv2.CAP_PROP_FPS)

# Define the codec and VideoWriter
fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # 'mp4v' codec for .mp4 format
out = cv2.VideoWriter(output_video_path, fourcc, original_fps, (frame_width, frame_height))

# Optimized glare and halo effect using vectorized operations
def apply_glare_and_halo(image, mask, halo_intensity=0.7, glare_blur=15):
    """
    Applies glare and halo effect to the bright areas of the image.
    Uses optimized vectorized operations for speed.
    """
    # Ensure the mask is three-channel
    mask_3channel = cv2.merge([mask, mask, mask])

    # Add a halo effect by blurring the mask
    halo_effect = cv2.GaussianBlur(mask_3channel, (glare_blur, glare_blur), 0)

    # Apply the halo effect with blending
    glare_halo = cv2.addWeighted(image, 1, halo_effect, halo_intensity, 0)

    return glare_halo

# Reduce contrast using vectorized operations
def decrease_contrast(image, factor=0.5):
    """
    Reduces contrast by blending the image with its mean gray value.
    Optimized for more visually appealing results.
    """
    # Compute the mean intensity of the entire image
    gray_mean = np.mean(image, dtype=np.float32)

    # Create a blended image using the mean intensity
    blended = cv2.addWeighted(image, factor, np.full_like(image, gray_mean, dtype=np.uint8), 1 - factor, 0)

    return blended


# Video processing
total_processing_time = 0
frame_count = 0
start_time_video = time.time()

while True:
    ret, frame = cap.read()
    if not ret:
        break

    start_time_frame = time.time()

    # Convert to grayscale for mask generation
    gray_image = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Create a mask for bright areas
    _, bright_mask = cv2.threshold(gray_image, 200, 255, cv2.THRESH_BINARY)

    # Apply glare and halo effect
    glare_halo = apply_glare_and_halo(frame, bright_mask)

    # Decrease contrast for the final frame
    final_frame = decrease_contrast(glare_halo)

    # Write the processed frame
    out.write(final_frame)

    processing_time_frame = time.time() - start_time_frame
    total_processing_time += processing_time_frame
    frame_count += 1

cap.release()
out.release()

end_time_video = time.time()
overall_processing_time = end_time_video - start_time_video
overall_processing_fps = frame_count / overall_processing_time
average_processing_time = total_processing_time / frame_count

print(f"Processed video saved to {output_video_path}")
print(f"Average processing time per frame: {average_processing_time:.4f} seconds")
print(f"Overall processing FPS: {overall_processing_fps:.2f}")
print(f"Original video FPS: {original_fps}")
