import cv2
import numpy as np
import time
import pygame
from pygame.locals import *

def process_frame(frame):
    """
    Process a single frame to simulate nuclear cataract symptoms.
    """
    # 1. Gaussian Blur
    kernel_size = 15
    blurred_frame = cv2.GaussianBlur(frame, (kernel_size, 1), 5)  # Horizontal pass
    blurred_frame = cv2.GaussianBlur(blurred_frame, (1, kernel_size), 5)  # Vertical pass

    # 2. Yellow Tint
    yellow_tint = np.array([0.5, 1.0, 1.0], dtype=np.float32)  # [B, G, R]
    yellow_frame = blurred_frame.astype(np.float32) * yellow_tint
    yellow_frame = np.clip(yellow_frame, 0, 255).astype(np.uint8)

    # 3. Reduce Contrast
    contrast_reduced_frame = cv2.convertScaleAbs(yellow_frame, alpha=0.65, beta=30)

    return contrast_reduced_frame

def simulate_cataract_realtime(webcam_index=0):
    """
    Simulate nuclear cataract symptoms in real-time using the webcam.
    """
    # Initialize Pygame
    pygame.init()
    screen = pygame.display.set_mode((0, 0), FULLSCREEN)
    pygame.display.set_caption('Cataract Simulation')
    screen_w = pygame.display.Info().current_w
    screen_h = pygame.display.Info().current_h

    # Open the webcam
    cap = cv2.VideoCapture(webcam_index)
    if not cap.isOpened():
        print("Error: Unable to access webcam.")
        return

    # Track FPS
    frame_count = 0
    total_time = 0

    try:
        while True:
            start_time = time.time()
            
            # Capture frame
            ret, frame = cap.read()
            if not ret:
                print("Error: Unable to read frame from webcam.")
                break

            # Process frame
            processed_frame = process_frame(frame)

            # Convert for Pygame display
            rgb_frame = cv2.cvtColor(processed_frame, cv2.COLOR_BGR2RGB)
            fullscreen_frame = cv2.resize(rgb_frame, (screen_w, screen_h))
            
            # Rotate and display
            pygame_frame = pygame.surfarray.make_surface(np.rot90(fullscreen_frame))
            screen.blit(pygame_frame, (0, 0))
            pygame.display.flip()

            # Handle exit events
            for event in pygame.event.get():
                if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                    raise KeyboardInterrupt

            # Calculate and print FPS
            processing_time = time.time() - start_time
            total_time += processing_time
            frame_count += 1
            fps = 1 / processing_time if processing_time > 0 else 0
            print(f"FPS: {fps:.1f}", end='\r')

    except KeyboardInterrupt:
        print("\nExiting real-time video processing.")
    
    finally:
        cap.release()
        pygame.quit()

        if frame_count > 0:
            average_processing_time = total_time / frame_count
            overall_fps = frame_count / total_time
            print(f"\nTotal frames processed: {frame_count}")
            print(f"Total processing time: {total_time:.4f} seconds")
            print(f"Average processing time per frame: {average_processing_time:.4f} seconds")
            print(f"Real-time processing FPS: {overall_fps:.2f}")

# Example usage
simulate_cataract_realtime(0)
