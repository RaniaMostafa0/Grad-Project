import cv2
import numpy as np
import time
from IPython.display import display, clear_output
from PIL import Image

def process_frame(frame):
    """
    Process a single frame by applying Gaussian blur.
    """
    # Apply Gaussian blur
    blurred_frame = cv2.GaussianBlur(frame, (15, 15), 0)
    return blurred_frame

def display_frame_in_notebook(frame, max_width=1280, max_height=720):
    """
    Display a frame inline in Jupyter Notebook without stretching, maintaining aspect ratio.
    """
    height, width = frame.shape[:2]
    scale = min(max_width / width, max_height / height)
    new_width, new_height = int(width * scale), int(height * scale)

    resized_frame = cv2.resize(frame, (new_width, new_height))
    frame_rgb = cv2.cvtColor(resized_frame, cv2.COLOR_BGR2RGB)
    pil_image = Image.fromarray(frame_rgb)

    clear_output(wait=True)
    display(pil_image)

def simulate_video_realtime(webcam_index):
    # Open the webcam
    cap = cv2.VideoCapture(webcam_index)

    if not cap.isOpened():
        print("Error: Unable to access webcam.")
        return

    print("Press 'Kernel Interrupt' to stop the simulation.")

    frame_count = 0
    total_processing_time = 0

    try:
        while True:
            ret, frame = cap.read()
            if not ret:
                print("Error: Unable to read frame from webcam.")
                break

            # Start timing
            frame_start = time.time()

            # Process the frame
            processed_frame = process_frame(frame)

            # Display the processed frame in Jupyter Notebook
            display_frame_in_notebook(processed_frame)

            # Stop timing
            frame_end = time.time()

            # Calculate processing time and FPS
            frame_processing_time = frame_end - frame_start
            total_processing_time += frame_processing_time
            frame_count += 1
            fps = 1 / frame_processing_time if frame_processing_time > 0 else 0

            print(f"Frame {frame_count}, FPS: {fps:.2f}", end='\r')

    except KeyboardInterrupt:
        print("\nExiting real-time video processing.")

    finally:
        cap.release()

        if frame_count > 0:
            average_processing_time = total_processing_time / frame_count
            overall_fps = frame_count / total_processing_time
            print(f"\nTotal frames processed: {frame_count}")
            print(f"Total processing time: {total_processing_time:.4f} seconds")
            print(f"Average processing time per frame: {average_processing_time:.4f} seconds")
            print(f"Real-time processing FPS: {overall_fps:.2f}")

# Example usage
simulate_video_realtime(1)
