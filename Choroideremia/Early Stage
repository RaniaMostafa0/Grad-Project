import cv2
import numpy as np
import time
import pygame
import sys

# ================== Night Blindness Functions ==================

def separable_gaussian_blur(image, kernel_size, sigma):
    """Apply Gaussian blur more efficiently using separable filters."""
    return cv2.GaussianBlur(image, (kernel_size, kernel_size), sigma)

def simulate_night_blindness(image, adjustment_level):
    """Simulate night blindness by darkening and blurring the image."""
    darkened_image = image * adjustment_level
    darkened_image = np.clip(darkened_image, 0, 255)
    blurred_image = separable_gaussian_blur(darkened_image, 31, 10)
    return blurred_image.astype(np.uint8)

def detect_light_condition(frame):
    """Detect the average brightness of the frame."""
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    return np.mean(gray)

# ================== Image Processing ==================

def resize_image(image, desired_width=1280, desired_height=720):
    """Resizes the image to the desired dimensions."""
    return cv2.resize(image, (desired_width, desired_height), interpolation=cv2.INTER_AREA)

# ================== Pygame Display and FPS Calculation ==================

def test_webcam_indices(max_index=4):
    """Test and return available webcam indices."""
    available_cams = []
    for i in range(max_index):
        cap = cv2.VideoCapture(i)
        if cap.isOpened():
            available_cams.append(i)
            cap.release()
    return available_cams

def main():
    # ================== Display Configuration ==================
    desired_width = 1280  # 720p width
    desired_height = 720  # 720p height

    # ================== Webcam Setup ==================
    available_cameras = test_webcam_indices()
    if not available_cameras:
        print("No webcams detected.")
        return

    cap = cv2.VideoCapture(available_cameras[0])
    if not cap.isOpened():
        print("Failed to open webcam.")
        return

    # Set webcam to 720p
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, desired_width)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, desired_height)
    time.sleep(2.0)

    # ================== Pygame Setup ==================
    pygame.init()
    screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
    screen_info = pygame.display.Info()
    screen_w = screen_info.current_w
    screen_h = screen_info.current_h
    pygame.display.set_caption("Real-Time Night Blindness Simulation")

    # Calculate aspect ratio parameters
    aspect_ratio = desired_width / desired_height
    target_width = desired_width
    target_height = desired_height

    # Initialize font and clock
    font = pygame.font.SysFont("Arial", 24)
    clock = pygame.time.Clock()

    # ================== Main Loop ==================
    adjustment_level = 0.2
    running = True
    fps_timer = time.time()
    fps_count = 0
    fps = 0

    while running:
        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
                running = False

        # Capture and process frame
        ret, frame = cap.read()
        if not ret:
            break

        frame = resize_image(frame, desired_width, desired_height)
        avg_brightness = detect_light_condition(frame)

        # Apply effects
        if avg_brightness < 100:
            adjusted_frame = simulate_night_blindness(frame, adjustment_level)
            adjustment_level = min(1.0, adjustment_level + 0.005)
        else:
            adjusted_frame = frame
            adjustment_level = max(0.2, adjustment_level - 0.005)

        # ================== Aspect Ratio Maintenance ==================
        # Calculate display dimensions
        display_height = int(screen_w / aspect_ratio)
        if display_height > screen_h:
            display_height = screen_h
            display_width = int(screen_h * aspect_ratio)
        else:
            display_width = screen_w

        # Convert and scale image
        rgb_image = cv2.cvtColor(adjusted_frame, cv2.COLOR_BGR2RGB)
        resized = cv2.resize(rgb_image, (display_width, display_height))
        pygame_surface = pygame.surfarray.make_surface(np.rot90(resized))

        # Center the image
        x_offset = (screen_w - display_width) // 2
        y_offset = (screen_h - display_height) // 2

        # Render to screen
        screen.fill((0, 0, 0))  # Black background
        screen.blit(pygame_surface, (x_offset, y_offset))

        # FPS display
        fps_count += 1
        if time.time() - fps_timer >= 1:
            fps = fps_count
            fps_count = 0
            fps_timer = time.time()
        
        fps_text = font.render(f"FPS: {fps}", True, (255, 255, 255))
        screen.blit(fps_text, (10, 10))

        pygame.display.flip()
        clock.tick(60)

    # Cleanup
    cap.release()
    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
