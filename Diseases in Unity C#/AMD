using UnityEngine;
using UnityEngine.UI;
using OpenCVForUnity.CoreModule;
using OpenCVForUnity.ImgprocModule;
using OpenCVForUnity.UnityUtils;
using System.Collections;

[RequireComponent(typeof(RawImage))]
public class AMDEffect : MonoBehaviour
{
    /* ───── Blur phase (adjust in Inspector) ───── */
    [Header("Blur Mask (dot → circle)")]
    [Tooltip("Radius in pixels at slider = 0")]
    [SerializeField] private float blurStartRadius = 2f;
    [Tooltip("Radius in pixels at the end of the blur‑only phase")]
    [SerializeField] private float blurEndRadius = 300f;
    [SerializeField] private float blurFeatherPx = 50f;   // soft edge width
    [SerializeField, Range(0f, 1f)] private float blurNoiseMin = 0.02f;
    [SerializeField, Range(0f, 1f)] private float blurNoiseMax = 0.12f;
    [Tooltip("Slider portion (0‑1) reserved for blur before black spot starts")]
    [SerializeField, Range(0.1f, 0.6f)] private float blurOnlyFraction = 0.3f;

    /* ---- Black spot & distortion parameters ---- */
    [Header("Black Spot / Distortion")]
    [SerializeField] private int maxKernelSize = 51;
    [SerializeField] private float maxOuterRadius = 300f;
    [SerializeField] private float maxCoreRadius = 280f;
    [SerializeField] private float extensionMaxPixels = 40f;
    [SerializeField] private float maxDistortionPixels = 10f;
    [SerializeField] private float distortionPeriod = 120f;
    [SerializeField] private float ringExpansion = 15f;
    [SerializeField] private float ringWidth = 35f;

    /* ---- Runtime refs & mats ---- */
    RawImage display; Slider slider; WebCamTexture cam; Texture2D tex;

    Mat src8, blur8, src32, blur32, warped32, dst32, dst8;
    Mat blurMask, spotCoreMask, spotOuterMask, distortionMask;
    Mat edgeMask, noiseMap, radiusMap, irregular, tmp32, ones32;
    Mat blur4, invBlur4, coreOuter4;
    Mat baseMapX, baseMapY, sinX, sinY, mapX, mapY;

    bool ready = false; float lastDisease = -1f;

    /* ------------ public initialiser ------------ */
    public void Initialize(RawImage tgt, Slider s, WebCamTexture sharedCam)
    {
        display = tgt; slider = s; cam = sharedCam;
        if (!cam.isPlaying) cam.Play();
        StartCoroutine(AllocWhenCamReady());
    }

    IEnumerator AllocWhenCamReady()
    {
        while (cam.width <= 16) yield return null;
        int w = cam.width, h = cam.height;

        tex = new Texture2D(w, h, TextureFormat.RGBA32, false);
        display.texture = tex; display.color = Color.white;

        src8 = new Mat(h, w, CvType.CV_8UC4); blur8 = new Mat(h, w, CvType.CV_8UC4);
        src32 = new Mat(h, w, CvType.CV_32FC4); blur32 = new Mat(h, w, CvType.CV_32FC4);
        warped32 = new Mat(h, w, CvType.CV_32FC4);
        dst32 = new Mat(h, w, CvType.CV_32FC4); dst8 = new Mat(h, w, CvType.CV_8UC4);

        blurMask = new Mat(h, w, CvType.CV_32F);
        spotCoreMask = new Mat(h, w, CvType.CV_32F);
        spotOuterMask = new Mat(h, w, CvType.CV_32F);
        distortionMask = new Mat(h, w, CvType.CV_32F);
        edgeMask = new Mat(h, w, CvType.CV_32F);

        noiseMap = GenNoise(h, w, 111);
        radiusMap = GenRadius(h, w);
        irregular = new Mat(h, w, CvType.CV_32F);
        tmp32 = new Mat(h, w, CvType.CV_32F);
        ones32 = Mat.ones(h, w, CvType.CV_32F);

        blur4 = new Mat(h, w, CvType.CV_32FC4);
        invBlur4 = new Mat(h, w, CvType.CV_32FC4);
        coreOuter4 = new Mat(h, w, CvType.CV_32FC4);

        baseMapX = new Mat(h, w, CvType.CV_32F); baseMapY = new Mat(h, w, CvType.CV_32F);
        sinX = new Mat(h, w, CvType.CV_32F); sinY = new Mat(h, w, CvType.CV_32F);
        mapX = new Mat(h, w, CvType.CV_32F); mapY = new Mat(h, w, CvType.CV_32F);

        for (int y = 0; y < h; y++)
        {
            float sy = Mathf.Sin(2f * Mathf.PI * y / distortionPeriod);
            for (int x = 0; x < w; x++)
            {
                baseMapX.put(y, x, x); baseMapY.put(y, x, y);
                float sx = Mathf.Sin(2f * Mathf.PI * x / distortionPeriod);
                sinX.put(y, x, sy); sinY.put(y, x, sx);
            }
        }
        ready = true;
    }

    /* ----------------- Update ----------------- */
    void Update()
    {
        if (!ready || !cam.didUpdateThisFrame) return;
        Utils.webCamTextureToMat(cam, src8);

        float val = slider ? slider.value : 0f;

        float blurPhase = Mathf.Clamp01(val / blurOnlyFraction);
        float diseasePhase = val <= blurOnlyFraction ? 0f
                             : (val - blurOnlyFraction) / (1f - blurOnlyFraction);

        BuildMasksAndWarpMaps(blurPhase, diseasePhase);

        /* Gaussian blur kernel */
        int k = Mathf.Clamp((int)(blurPhase * maxKernelSize), 1, maxKernelSize);
        if ((k & 1) == 0) k++;
        Imgproc.GaussianBlur(src8, blur8, new Size(k, k), 0);

        src8.convertTo(src32, CvType.CV_32FC4);
        blur8.convertTo(blur32, CvType.CV_32FC4);
        Imgproc.remap(src32, warped32, mapX, mapY, Imgproc.INTER_LINEAR);

        Core.multiply(warped32, blur4, dst32);
        Core.multiply(blur32, invBlur4, tmp32);
        Core.add(dst32, tmp32, dst32);
        Core.multiply(dst32, coreOuter4, dst32);

        dst32.convertTo(dst8, CvType.CV_8UC4);
        Utils.fastMatToTexture2D(dst8, tex);
    }

    /* -------- Build masks + warp maps -------- */
    void BuildMasksAndWarpMaps(float blurP, float diseaseP)
    {
        BuildBlurMask(blurP);
        BuildSpotMasks(diseaseP);

        Imgproc.cvtColor(blurMask, blur4, Imgproc.COLOR_GRAY2RGBA);
        Core.subtract(ones32, blurMask, tmp32);
        Imgproc.cvtColor(tmp32, invBlur4, Imgproc.COLOR_GRAY2RGBA);

        Core.multiply(spotCoreMask, spotOuterMask, edgeMask);
        Imgproc.cvtColor(edgeMask, coreOuter4, Imgproc.COLOR_GRAY2RGBA);

        float amp = maxDistortionPixels * diseaseP;
        Core.multiply(sinX, new Scalar(amp), mapX);
        Core.multiply(sinY, new Scalar(amp), mapY);
        Core.multiply(mapX, distortionMask, mapX);
        Core.multiply(mapY, distortionMask, mapY);
        Core.add(baseMapX, mapX, mapX);
        Core.add(baseMapY, mapY, mapY);
    }

    /* --------------- Blur mask --------------- */
    void BuildBlurMask(float p)
    {
        float radius = Mathf.Lerp(blurStartRadius, blurEndRadius,
                                    Mathf.SmoothStep(0f, 1f, p));
        float noiseAmp = Mathf.Lerp(blurNoiseMin, blurNoiseMax, p);

        Core.multiply(noiseMap, new Scalar(noiseAmp), irregular);
        Core.add(irregular, new Scalar(radius), irregular);      // per‑pixel radius
        Core.subtract(radiusMap, irregular, blurMask);

        float f = blurFeatherPx;
        Core.add(blurMask, new Scalar(f * 0.5f), blurMask);
        Core.divide(blurMask, new Scalar(f), blurMask);
        Core.min(blurMask, new Scalar(1f), blurMask);
        Core.max(blurMask, new Scalar(0f), blurMask);

        Imgproc.GaussianBlur(blurMask, blurMask, new Size(3, 3), 0);
    }

    /* ---- Black spot, halo & distortion ring ---- */
    void BuildSpotMasks(float p)
    {
        spotCoreMask.setTo(new Scalar(1f));
        spotOuterMask.setTo(new Scalar(1f));
        distortionMask.setTo(new Scalar(0f));

        if (p < 0.001f) return;

        float t = p;
        float e = Mathf.Sqrt(t);
        float oR = Mathf.Lerp(10f, maxOuterRadius, e);

        float d = 0.4f;
        float cp = Mathf.Clamp01((e - d) / (1f - d));
        float cR = Mathf.Lerp(5f, maxCoreRadius, cp);

        float fade = 50f, amp = 10f;

        /* irregular dark core */
        float extAmp = extensionMaxPixels * cp;
        Core.multiply(noiseMap, new Scalar(extAmp), irregular);
        Core.add(irregular, new Scalar(cR), irregular);

        Core.subtract(radiusMap, irregular, spotCoreMask);
        Core.add(spotCoreMask, new Scalar(fade * 0.5f), spotCoreMask);
        Core.divide(spotCoreMask, new Scalar(fade), spotCoreMask);
        Core.min(spotCoreMask, new Scalar(1f), spotCoreMask);
        Core.max(spotCoreMask, new Scalar(0f), spotCoreMask);

        /* outer halo */
        Core.multiply(noiseMap, new Scalar(amp), tmp32);
        Core.add(tmp32, new Scalar(oR), tmp32);
        Core.subtract(radiusMap, tmp32, spotOuterMask);
        Core.add(spotOuterMask, new Scalar(fade * 0.5f), spotOuterMask);
        Core.divide(spotOuterMask, new Scalar(fade), spotOuterMask);
        Core.min(spotOuterMask, new Scalar(1f), spotOuterMask);
        Core.max(spotOuterMask, new Scalar(0.3f), spotOuterMask);

        /* distortion ring mask */
        float inner = cR + ringExpansion + extAmp;
        float outer = inner + ringWidth;
        Core.subtract(radiusMap, new Scalar(inner), tmp32);
        Core.max(tmp32, new Scalar(0f), tmp32);
        Core.multiply(ones32, new Scalar(outer - inner), irregular);
        Core.subtract(irregular, tmp32, tmp32);
        Core.divide(tmp32, new Scalar(outer - inner), distortionMask);
        Core.min(distortionMask, new Scalar(1f), distortionMask);
        Core.max(distortionMask, new Scalar(0f), distortionMask);

        /* smooth */
        int k = Mathf.Max(3, (int)(e * maxKernelSize)); if ((k & 1) == 0) k++;
        Imgproc.GaussianBlur(spotOuterMask, spotOuterMask, new Size(k, k), 0);
        Imgproc.GaussianBlur(spotCoreMask, spotCoreMask, new Size(k, k), 0);
        Imgproc.GaussianBlur(distortionMask, distortionMask, new Size(k, k), 0);
    }

    /* ---------------- helpers ---------------- */
    Mat GenRadius(int h, int w)
    {
        Mat r = new Mat(h, w, CvType.CV_32F);
        float cx = w * 0.5f, cy = h * 0.5f;
        for (int y = 0; y < h; y++)
        {
            float dy2 = (y - cy) * (y - cy);
            for (int x = 0; x < w; x++)
                r.put(y, x, Mathf.Sqrt((x - cx) * (x - cx) + dy2));
        }
        return r;
    }

    Mat GenNoise(int h, int w, int blur = 111)
    {
        Mat n = new Mat(h, w, CvType.CV_32F);
        Core.randn(n, 0, 1);
        Imgproc.GaussianBlur(n, n, new Size(blur, blur), 0);
        Core.MinMaxLocResult mm = Core.minMaxLoc(n);
        Core.subtract(n, new Scalar(mm.minVal), n);
        Core.divide(n, new Scalar(mm.maxVal - mm.minVal), n);
        Core.multiply(n, new Scalar(2), n);
        Core.subtract(n, new Scalar(1), n);
        return n;
    }

    /* ---------------- cleanup ---------------- */
    void OnDestroy()
    {
        if (cam != null && cam.isPlaying) cam.Stop();
        foreach (Mat m in new[]{src8,blur8,src32,blur32,warped32,dst32,dst8,
            blurMask,spotCoreMask,spotOuterMask,distortionMask,
            edgeMask,noiseMap,radiusMap,irregular,tmp32,ones32,
            blur4,invBlur4,coreOuter4,
            baseMapX,baseMapY,sinX,sinY,mapX,mapY})
            m?.Dispose();
    }
}
