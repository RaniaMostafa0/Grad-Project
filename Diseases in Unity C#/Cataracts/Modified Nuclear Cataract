using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using OpenCVForUnity.CoreModule;
using OpenCVForUnity.ImgprocModule;
using OpenCVForUnity.UnityUtils;

/// <summary>
/// Real-time Nuclear Cataract simulation.
/// • Slider value 0 → normal vision.
/// • Slider value 1 → maximum blur, yellow tint, and contrast loss.
/// </summary>
[RequireComponent(typeof(RawImage))]
public class NuclearCataractEffect : MonoBehaviour
{
    [Header("Effect Parameters")]
    [SerializeField] private int    baseKernel = 15;   // blur kernel at t = 1
    [SerializeField] private double alphaMin   = 1.0;  // contrast α at t = 0
    [SerializeField] private double alphaMax   = 0.65; // contrast α at t = 1
    [SerializeField] private double betaMin    = 0.0;  // contrast β at t = 0
    [SerializeField] private double betaMax    = 30.0; // contrast β at t = 1
    [SerializeField] private float  blueReduction = 0.5f; // Blue channel multiplier for yellow tint (0 to 1)

    // ----- runtime refs -----
    private RawImage      display;
    private Slider        slider;
    private WebCamTexture cam;
    private Texture2D     outputTex;

    // ----- OpenCV mats -----
    private Mat matIn, matBlurH, matBlurHV, matYellow, matMix, matRGBA;

    /// <summary>Called by MenuManager when this mode is selected.</summary>
    public void Initialize(RawImage target, Slider control, WebCamTexture sharedCam)
    {
        display = target;
        slider  = control;
        cam     = sharedCam;
        if (!cam.isPlaying) cam.Play();

        int w = cam.width  > 16 ? cam.width  : 1280;
        int h = cam.height > 16 ? cam.height : 720;

        outputTex       = new Texture2D(w, h, TextureFormat.RGBA32, false);
        display.texture = outputTex;
        display.color   = Color.white;   // Ensure RawImage is opaque

        matIn     = new Mat(h, w, CvType.CV_8UC4);
        matBlurH  = new Mat(h, w, CvType.CV_8UC4);
        matBlurHV = new Mat(h, w, CvType.CV_8UC4);
        matYellow = new Mat(h, w, CvType.CV_8UC4);
        matMix    = new Mat(h, w, CvType.CV_8UC4);
        matRGBA   = new Mat(h, w, CvType.CV_8UC4);
    }

    void Update()
    {
        if (cam == null || !cam.didUpdateThisFrame) return;

        Utils.webCamTextureToMat(cam, matIn);
        double t = slider != null ? slider.value : 0.0;     // Severity 0-1

        /* 1 — Separable Gaussian blur */
        int k = Mathf.Max(1, 1 + (int)(baseKernel * t));
        if ((k & 1) == 0) k++;                              // Make odd
        Imgproc.GaussianBlur(matIn,    matBlurH,  new Size(k, 1), 5);
        Imgproc.GaussianBlur(matBlurH, matBlurHV, new Size(1, k), 5);

        /* 2 — Yellow-tinted version in RGBA */
        matBlurHV.copyTo(matYellow);
        List<Mat> channels = new List<Mat>();
        Core.split(matYellow, channels); // channels[0]=R, [1]=G, [2]=B, [3]=A
        Mat blueChannel = channels[2];
        blueChannel.convertTo(blueChannel, CvType.CV_32F);
        Core.multiply(blueChannel, new Scalar(blueReduction), blueChannel);
        blueChannel.convertTo(blueChannel, CvType.CV_8U);
        channels[2] = blueChannel;
        Core.merge(channels, matYellow);

        /* 3 — Blend original-blurred RGBA with yellow version by t */
        matBlurHV.copyTo(matMix);
        Core.addWeighted(matMix, 1.0 - t, matYellow, t, 0.0, matMix);

        /* 4 — Contrast change  dst = α·src + β */
        double a = Mathf.Lerp((float)alphaMin, (float)alphaMax, (float)t);
        double b = Mathf.Lerp((float)betaMin,  (float)betaMax,  (float)t);
        Core.convertScaleAbs(matMix, matRGBA, a, b);

        /* 5 — Force alpha fully opaque so background never shows */
        Core.split(matRGBA, channels);
        channels[3].setTo(new Scalar(255));
        Core.merge(channels, matRGBA);

        /* 6 — Upload to texture (matRGBA is already in RGBA order) */
        Utils.fastMatToTexture2D(matRGBA, outputTex);

        /* 7 — Clean up temporary channels */
        foreach (var channel in channels) channel.Dispose();
    }

    void OnDisable()
    {
        matIn?.Dispose(); matBlurH?.Dispose(); matBlurHV?.Dispose();
        matYellow?.Dispose(); matMix?.Dispose(); matRGBA?.Dispose();
    }

    void OnDestroy()
    {
        if (cam != null && cam.isPlaying) cam.Stop();
    }
}
