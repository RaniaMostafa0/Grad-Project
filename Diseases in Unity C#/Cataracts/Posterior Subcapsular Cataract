using UnityEngine;
using UnityEngine.UI;
using OpenCVForUnity.CoreModule;
using OpenCVForUnity.ImgprocModule;
using OpenCVForUnity.UnityUtils;
using System.Collections.Generic;

[RequireComponent(typeof(RawImage))]
public class PosteriorCataractEffect : MonoBehaviour
{
    [Header("Glare parameters")]
    [SerializeField] private int maxBlurRadius = 50; // halo spread at t = 1
    [SerializeField] private int power = 2;  // fall-off exponent
    [SerializeField] private int brightThresh = 220;// threshold for hotspots

    // runtime refs
    private RawImage display;
    private Slider slider;
    private WebCamTexture cam;
    private Texture2D texOut;

    // mats
    private Mat matIn, matGray, matMask, matBlur, matHalo, matOut, matRGBA;

    public void Initialize(RawImage target, Slider control, WebCamTexture sharedCam)
    {
        display = target;
        slider = control;
        cam = sharedCam;
        if (!cam.isPlaying) cam.Play();

        int w = cam.width > 16 ? cam.width : 1280;
        int h = cam.height > 16 ? cam.height : 720;

        texOut = new Texture2D(w, h, TextureFormat.RGBA32, false);
        display.texture = texOut;
        display.color = Color.white;

        matIn = new Mat(h, w, CvType.CV_8UC4);
        matGray = new Mat(h, w, CvType.CV_8UC1);
        matMask = new Mat(h, w, CvType.CV_8UC1);
        matBlur = new Mat(h, w, CvType.CV_32FC1);
        matHalo = new Mat(h, w, CvType.CV_8UC3);
        matOut = new Mat(h, w, CvType.CV_8UC3);
        matRGBA = new Mat(h, w, CvType.CV_8UC4);
    }

    void Update()
    {
        if (cam == null || !cam.didUpdateThisFrame) return;

        Utils.webCamTextureToMat(cam, matIn);
        double t = slider != null ? slider.value : 0.0;  // severity 0..1

        if (t < 0.001)
        {
            // plain copy (no processing)
            Utils.fastMatToTexture2D(matIn, texOut);
            return;
        }

        /* 1 — find bright pixels */
        Imgproc.cvtColor(matIn, matGray, Imgproc.COLOR_RGBA2GRAY);
        Imgproc.threshold(matGray, matMask, brightThresh, 255, Imgproc.THRESH_BINARY);

        /* 2 — blur mask: larger sigma as t increases */
        double sigma = t * maxBlurRadius;
        Imgproc.GaussianBlur(matMask, matBlur, new Size(0, 0), sigma, sigma);

        /* 3 — power fall-off */
        matBlur.convertTo(matBlur, CvType.CV_32FC1, 1.0 / 255);
        Core.pow(matBlur, power, matBlur);               // emphasise cores

        /* 4 — halo layer = white * mask */
        matHalo.setTo(new Scalar(255, 255, 255));
        List<Mat> channels = new List<Mat>();
        Core.split(matHalo, channels);                   // copy single mask to 3 chan
        channels[0] = matBlur; channels[1] = matBlur; channels[2] = matBlur;
        Core.merge(channels, matHalo);
        matHalo.convertTo(matHalo, CvType.CV_8UC3, 255);

        /* 5 — blend original + halo */
        Imgproc.cvtColor(matIn, matOut, Imgproc.COLOR_RGBA2BGR); // to 3-chan
        Core.addWeighted(matOut, 1.0, matHalo, 0.7 * t, 0, matOut);

        /* 6 — BGR → RGBA and ensure opaque alpha */
        Imgproc.cvtColor(matOut, matRGBA, Imgproc.COLOR_BGR2RGBA);
        Core.split(matRGBA, channels);
        channels[3].setTo(new Scalar(255));
        Core.merge(channels, matRGBA);

        Utils.fastMatToTexture2D(matRGBA, texOut);
    }

    void OnDisable()
    {
        matIn?.Dispose(); matGray?.Dispose(); matMask?.Dispose();
        matBlur?.Dispose(); matHalo?.Dispose(); matOut?.Dispose(); matRGBA?.Dispose();
    }

    void OnDestroy()
    {
        if (cam != null && cam.isPlaying) cam.Stop();
    }
}
