/*
 * ChoroideremiaEffect.cs  –  2025‑05‑04
 * ------------------------------------------------------------
 * Combines
 *   • Slider‑ & scene‑driven night blindness
 *   • Irregular tunnel vision
 *   • Large peripheral lesions (static)
 *   • Many small black flecks that appear / grow only in the centre
 *
 * Requires OpenCVForUnity (core, imgproc, unity) and a RawImage target.
 */

using UnityEngine;
using UnityEngine.UI;
using OpenCVForUnity.CoreModule;
using OpenCVForUnity.ImgprocModule;
using OpenCVForUnity.UnityUtils;
using System.Collections;
using System.Collections.Generic;

[RequireComponent(typeof(RawImage))]
public class ChoroideremiaEffect : MonoBehaviour
{
    /*──────────────────── Tunnel‑vision parameters ────────────────────*/
    [Header("Tunnel‑vision")]
    [Range(3, 201)] public int blurSize = 51;
    [Range(.05f, .5f)] public float rimWidthFraction = .20f;
    [Range(0f, 1f)] public float irregularityStrength = .40f;

    /*──────────────────── Slider‑driven night blindness ───────────────*/
    [Header("Slider‑based night‑blindness")]
    [Tooltip("Brightness multiplier when slider = 1 (before full blackout)")]
    [Range(.1f, 1f)] public float minBrightnessAtNight = .40f;

    /*──────────────────── Scene‑brightness night blindness ────────────*/
    [Header("Scene‑dependent night‑blindness")]
    public float nightBlindnessThreshold = 60f;
    [Range(.1f, 1f)] public float nightBlindnessFactor = .4f;
    public float maxBlurAmount = 3f;

    /*──────────────────── Slider top‑end blackout ─────────────────────*/
    [Header("Full blackout")]
    [Range(.05f, .5f)] public float fullBlindFraction = .10f;

    /*──────────────────── Peripheral‑lesion parameters ────────────────*/
    [Header("Peripheral lesions (larger patches)")]
    public int peripheralSpotCount = 60;
    [Tooltip("Activation (darkness) levels – mid→periphery")]
    [Range(0f, 1f)] public float S2 = 0.85f;
    [Range(0f, 1f)] public float S3 = 1.0f;
    public Vector2 spotRadiusRangeX = new Vector2(25, 60);
    public Vector2 spotRadiusRangeY = new Vector2(35, 80);
    [Range(0f, 1f)] public float spotStart = 0.25f;
    [Range(1f, 8f)] public float spotDarknessBoost = 3f;

    /*──────────────────── Black‑fleck parameters (centre‑only) ────────*/
    [Header("Black flecks (tiny dots)")]
    public int fleckCount = 80;
    public Vector2 fleckRadiusRange = new Vector2(12, 40);
    [Range(0f, 1f)] public float fleckOpacity = 1f;
    [Tooltip("Radius of central disk (fraction of min(width,height))")]
    [Range(0.05f, 0.5f)] public float fleckCentralRadius = 0.30f;
    const float fleckGrow = 0.15f;   // slider‑space growth span

    /*──────────────────── Runtime references ──────────────────────────*/
    RawImage display; Slider uiSlider; WebCamTexture cam; Texture2D tex;

    /*──────────────────── OpenCV Mats ─────────────────────────────────*/
    Mat src8, matFloat, matProcessed;
    Mat tunnelMask, noiseMap, radiusMap, tmpFloat;
    Mat mask4, onesAlpha;
    Mat spotMask32, tmp4;

    /*──────────────────── Helpers & state ─────────────────────────────*/
    float maxRadius, rimWidthPx, lastSlider = -1f;
    bool ready = false;

    /* spot record shared by flecks & peripheral lesions */
    class Spot
    { public Vector2 c; public float rx, ry; public float a; public float born; }
    List<Spot> spots;

    /*──────────────────── Public entry ───────────────────────────────*/
    public void Initialize(RawImage target, Slider slider, WebCamTexture sharedCam)
    {
        display = target; uiSlider = slider;
        cam = sharedCam ?? new WebCamTexture(1280, 720);
        if (!cam.isPlaying) cam.Play();
        StartCoroutine(SetupWhenReady());
    }

    IEnumerator SetupWhenReady()
    {
        while (cam.width <= 16) yield return null;  // wait for camera
        int w = cam.width, h = cam.height;

        tex = new Texture2D(w, h, TextureFormat.RGBA32, false);
        display.texture = tex;

        src8 = new Mat(h, w, CvType.CV_8UC4);
        matFloat = new Mat(h, w, CvType.CV_32FC4);
        matProcessed = new Mat(h, w, CvType.CV_8UC4);

        tunnelMask = new Mat(h, w, CvType.CV_32F);
        noiseMap = GenNoise(h, w);
        radiusMap = GenRadius(h, w);
        tmpFloat = new Mat(h, w, CvType.CV_32F);

        onesAlpha = Mat.ones(h, w, CvType.CV_32F);
        mask4 = new Mat(h, w, CvType.CV_32FC4);

        spotMask32 = new Mat(h, w, CvType.CV_32F);
        tmp4 = new Mat(h, w, CvType.CV_32FC4);
        CreateSpots(h, w);

        maxRadius = Mathf.Sqrt((w * 0.5f) * (w * 0.5f) + (h * 0.5f) * (h * 0.5f));
        rimWidthPx = Mathf.Max(w, h) * rimWidthFraction;
        ready = true;
    }

    /*──────────────────── Unity Update ───────────────────────────────*/
    void Update()
    {
        if (!ready || !cam.didUpdateThisFrame) return;
        Utils.webCamTextureToMat(cam, src8);

        float t = uiSlider ? uiSlider.value : 0f;
        if (!Mathf.Approximately(t, lastSlider)) { BuildTunnelMask(t); lastSlider = t; }

        ApplyCombinedEffects(t);
        Utils.fastMatToTexture2D(matProcessed, tex);
    }

    /*──────────────────── Tunnel‑mask builder ────────────────────────*/
    void BuildTunnelMask(float t)
    {
        if (t < 1e-4f) { tunnelMask.setTo(new Scalar(1)); return; }

        Core.multiply(noiseMap, new Scalar(irregularityStrength * rimWidthPx), tmpFloat);
        Core.add(radiusMap, tmpFloat, tmpFloat);

        float clearR = Mathf.Lerp(maxRadius, 0f, t);
        float rimEnd = clearR + rimWidthPx;

        Core.subtract(tmpFloat, new Scalar(rimEnd), tunnelMask);
        Core.multiply(tunnelMask, new Scalar(-1), tunnelMask);
        Core.divide(tunnelMask, new Scalar(rimWidthPx), tunnelMask);
        Core.min(tunnelMask, new Scalar(1), tunnelMask);
        Core.max(tunnelMask, new Scalar(0), tunnelMask);

        float startFade = 1f - fullBlindFraction;
        if (t > startFade)
        {
            float k = (t - startFade) / fullBlindFraction;
            Core.multiply(tunnelMask, new Scalar(1f - k), tunnelMask);
        }
        Imgproc.GaussianBlur(tunnelMask, tunnelMask, new Size(blurSize, blurSize), 0);
    }

    /*──────────────────── Main pipeline ──────────────────────────────*/
    void ApplyCombinedEffects(float t)
    {
        /* 1️⃣  raw → float + global night‑blindness */
        src8.convertTo(matFloat, CvType.CV_32FC4);
        float sliderBrightness = Mathf.Lerp(1f, minBrightnessAtNight, t);
        Core.multiply(matFloat, new Scalar(sliderBrightness, sliderBrightness, sliderBrightness, 1), matFloat);

        /* 2️⃣  scene‑dependent extra dimming/blur */
        float avg = GetAverageBrightness(src8);
        if (avg < nightBlindnessThreshold)
        {
            float darkRatio = Mathf.Pow(Mathf.InverseLerp(nightBlindnessThreshold, 0f, avg), 1.5f);
            float nightMult = Mathf.Lerp(nightBlindnessFactor, 1f, darkRatio);
            Core.multiply(matFloat, new Scalar(nightMult, nightMult, nightMult, 1), matFloat);

            float blurRatio = Mathf.Pow(darkRatio, 1.5f) * Mathf.Pow(t, 1.5f);
            float blurInt = Mathf.Lerp(0f, maxBlurAmount, blurRatio);
            if (blurInt > 0.01f)
            {
                int k = Mathf.Clamp((int)(blurSize * blurInt) | 1, 3, 51);
                Imgproc.GaussianBlur(matFloat, matFloat, new Size(k, k), 0);
            }
        }

        /* 3️⃣  tunnel mask */
        List<Mat> tv = new List<Mat> { tunnelMask, tunnelMask, tunnelMask, onesAlpha };
        Core.merge(tv, mask4); Core.multiply(matFloat, mask4, matFloat);

        /* 4️⃣  lesions + flecks */
        if (t >= spotStart)
        {
            BuildSpotMask(t);
            Mat inv = new Mat();
            Core.subtract(onesAlpha, spotMask32, inv);
            List<Mat> sc = new List<Mat> { inv, inv, inv, onesAlpha };
            Mat spot4 = new Mat(); Core.merge(sc, spot4);
            Core.multiply(matFloat, spot4, matFloat);
            inv.Dispose(); spot4.Dispose();
        }

        /* 5️⃣  back to 8‑bit */
        matFloat.convertTo(matProcessed, CvType.CV_8UC4);
    }

    /*──────────────────── Spot & Fleck helpers ───────────────────────*/
    void CreateSpots(int h, int w)
    {
        spots = new List<Spot>();

        /* tiny black flecks – central only */
        System.Random rng = new System.Random();
        float cx = w * 0.5f, cy = h * 0.5f;
        float maxR = Mathf.Min(w, h) * fleckCentralRadius;

        for (int i = 0; i < fleckCount; i++)
        {
            Vector2 pos;
            do
            {
                pos = new Vector2(rng.Next(w), rng.Next(h));
            } while ((pos - new Vector2(cx, cy)).sqrMagnitude > maxR * maxR);

            spots.Add(new Spot
            {
                c = pos,
                rx = UnityEngine.Random.Range(fleckRadiusRange.x, fleckRadiusRange.y),
                ry = UnityEngine.Random.Range(fleckRadiusRange.x, fleckRadiusRange.y),
                born = (float)rng.NextDouble(),
                a = 0f
            });
        }

        /* peripheral larger lesions */
        for (int i = 0; i < peripheralSpotCount; i++)
        {
            float act = (i < 50)
                ? Mathf.Lerp(S2, S3 - 0.1f, i / 50f)
                : Mathf.Lerp(S3 - 0.1f, S3, (i - 50) / 10f);
            Spot p = RandomSpot(false, act, w, h); p.born = 0f; spots.Add(p);
        }
    }

    Spot RandomSpot(bool isCentral, float act, int w, int h)
    {
        int cx = isCentral ? Random.Range(w / 4, 3 * w / 4) : Random.Range(0, w);
        int cy = isCentral ? Random.Range(h / 4, 3 * h / 4) : Random.Range(0, h);
        float rx = Random.Range(spotRadiusRangeX.x, spotRadiusRangeX.y);
        float ry = Random.Range(spotRadiusRangeY.x, spotRadiusRangeY.y);
        return new Spot { c = new Vector2(cx, cy), rx = rx, ry = ry, a = act, born = 0f };
    }

    void BuildSpotMask(float tSlider)
    {
        float n = Mathf.Clamp01((tSlider - spotStart) / (1f - spotStart));
        spotMask32.setTo(new Scalar(0));
        int h = spotMask32.rows(), w = spotMask32.cols();

        foreach (var s in spots)
        {
            /* peripheral lesions */
            if (s.born == 0f && s.a > 0f)
            {
                float rpX = Mathf.Max(1f, s.rx * n);
                float rpY = Mathf.Max(1f, s.ry * n);
                float a = Mathf.Min(s.a * n * spotDarknessBoost, 1f);

                int x0 = Mathf.Max(0, (int)(s.c.x - 2 * rpX));
                int x1 = Mathf.Min(w, (int)(s.c.x + 2 * rpX));
                int y0 = Mathf.Max(0, (int)(s.c.y - 2 * rpY));
                int y1 = Mathf.Min(h, (int)(s.c.y + 2 * rpY));

                for (int y = y0; y < y1; y++)
                    for (int x = x0; x < x1; x++)
                    {
                        float dx = (x - s.c.x) / rpX, dy = (y - s.c.y) / rpY;
                        float d = Mathf.Sqrt(dx * dx + dy * dy);
                        float v = (d < 1f) ? 1f : (d < 2f) ? a * (1f - (d - 1f)) : 0f;
                        if (v > 0f && v > (float)spotMask32.get(y, x)[0])
                            spotMask32.put(y, x, v);
                    }
                continue;
            }

            /* tiny flecks */
            if (n < s.born) continue;
            float g = Mathf.Clamp01((n - s.born) / fleckGrow);

            int rfX = (int)(s.rx * g), rfY = (int)(s.ry * g);
            if (rfX < 1 || rfY < 1) continue;

            int x0f = Mathf.Max(0, (int)(s.c.x - 2 * rfX));
            int x1f = Mathf.Min(w, (int)(s.c.x + 2 * rfX));
            int y0f = Mathf.Max(0, (int)(s.c.y - 2 * rfY));
            int y1f = Mathf.Min(h, (int)(s.c.y + 2 * rfY));

            for (int y = y0f; y < y1f; y++)
                for (int x = x0f; x < x1f; x++)
                {
                    float dx = (x - s.c.x) / (float)rfX, dy = (y - s.c.y) / (float)rfY;
                    float d = Mathf.Sqrt(dx * dx + dy * dy);
                    float v = (d < 1f) ? fleckOpacity * g :
                          (d < 2f) ? fleckOpacity * g * (2f - d) : 0f;
                    if (v > 0f && v > (float)spotMask32.get(y, x)[0])
                        spotMask32.put(y, x, v);
                }
        }
        Imgproc.GaussianBlur(spotMask32, spotMask32, new Size(51, 51), 20);
    }

    /*──────────────────── Math & utility helpers ────────────────────*/
    float GetAverageBrightness(Mat m)
    {
        using (Mat g = new Mat())
        {
            Imgproc.cvtColor(m, g, Imgproc.COLOR_RGBA2GRAY);
            return (float)Core.mean(g).val[0];
        }
    }
    Mat GenRadius(int h, int w)
    {
        Mat r = new Mat(h, w, CvType.CV_32F);
        float cx = w * 0.5f, cy = h * 0.5f;
        for (int y = 0; y < h; y++)
        {
            float dy2 = (y - cy) * (y - cy);
            for (int x = 0; x < w; x++)
            {
                float dx2 = (x - cx) * (x - cx);
                r.put(y, x, Mathf.Sqrt(dx2 + dy2));
            }
        }
        return r;
    }
    Mat GenNoise(int h, int w)
    {
        Mat n = new Mat(h, w, CvType.CV_32F);
        Core.randn(n, 0, 1);
        Imgproc.GaussianBlur(n, n, new Size(blurSize, blurSize), 0);
        var mm = Core.minMaxLoc(n);
        Core.subtract(n, new Scalar(mm.minVal), n);
        Core.divide(n, new Scalar(mm.maxVal - mm.minVal), n);
        Core.multiply(n, new Scalar(2), n);
        Core.subtract(n, new Scalar(1), n);
        return n;
    }

    /*──────────────────── Cleanup ───────────────────────────────────*/
    void OnDestroy()
    {
        cam?.Stop();
        foreach (var m in new[]{src8,matFloat,matProcessed,
                               tunnelMask,noiseMap,radiusMap,tmpFloat,
                               mask4,onesAlpha,spotMask32,tmp4})
            m?.Dispose();
    }
}
