using UnityEngine;
using UnityEngine.UI;
using OpenCVForUnity.CoreModule;
using OpenCVForUnity.ImgprocModule;
using OpenCVForUnity.UnityUtils;
using System.Collections.Generic;
using System.Collections;

[RequireComponent(typeof(RawImage))]
public class HypertensiveRetinopathyEffect : MonoBehaviour
{
    [Header("Blur & Contrast")]
    [SerializeField] private int maxBlurKernelSize = 21;
    [SerializeField] private float minContrast = 0.5f;

    [Header("Black Spots")]
    [SerializeField] private int numSpots = 25;
    [SerializeField] private float minDistance = 100f;
    [SerializeField] private Vector2 spotRadiusRangeX = new Vector2(30, 70);
    [SerializeField] private Vector2 spotRadiusRangeY = new Vector2(40, 90);
    [SerializeField] private Vector2 transparencyRange = new Vector2(0.85f, 0.95f);

    private class Spot
    {
        public Vector2 center;
        public float maxRx, maxRy, maxAlpha;
    }

    private RawImage display;
    private Slider slider;
    private WebCamTexture cam;
    private Texture2D tex;

    private Mat src8, rgb, lab, processed;
    private List<Spot> spots;
    private Mat mask32, ones, tmp4;

    private bool ready = false;
    private float lastVal = -1f;

    public void Initialize(RawImage tgt, Slider s, WebCamTexture sharedCam)
    {
        display = tgt; slider = s; cam = sharedCam;
        if (!cam.isPlaying) cam.Play();
        StartCoroutine(WaitCam());
    }

    IEnumerator WaitCam()
    {
        while (cam.width <= 16) yield return null;
        int w = cam.width, h = cam.height;

        tex = new Texture2D(w, h, TextureFormat.RGBA32, false);
        display.texture = tex;

        src8 = new Mat(h, w, CvType.CV_8UC4);
        rgb = new Mat(h, w, CvType.CV_8UC3);
        lab = new Mat(h, w, CvType.CV_8UC3);
        processed = new Mat(h, w, CvType.CV_8UC4);
        mask32 = new Mat(h, w, CvType.CV_32F);
        ones = Mat.ones(h, w, CvType.CV_32F);
        tmp4 = new Mat(h, w, CvType.CV_32FC4);

        GenerateSpots(h, w);
        ready = true;
    }

    void GenerateSpots(int h, int w)
    {
        spots = new List<Spot>();
        int attempts;

        for (int i = 0; i < numSpots; i++)
        {
            attempts = 0;
            while (attempts < 100)
            {
                float cx = Random.Range(0, w);
                float cy = Random.Range(0, h);
                bool valid = true;
                foreach (var s in spots)
                {
                    if (Vector2.Distance(s.center, new Vector2(cx, cy)) < minDistance)
                    {
                        valid = false;
                        break;
                    }
                }
                if (valid)
                {
                    spots.Add(new Spot
                    {
                        center = new Vector2(cx, cy),
                        maxRx = Random.Range(spotRadiusRangeX.x, spotRadiusRangeX.y),
                        maxRy = Random.Range(spotRadiusRangeY.x, spotRadiusRangeY.y),
                        maxAlpha = Random.Range(transparencyRange.x, transparencyRange.y)
                    });
                    break;
                }
                attempts++;
            }
        }
    }

    void Update()
    {
        if (!ready || cam == null || slider == null || !cam.didUpdateThisFrame) return;

        Utils.webCamTextureToMat(cam, src8);

        float p = slider.value;
        ProcessFrame(p);
        Utils.fastMatToTexture2D(processed, tex);
    }

    void ProcessFrame(float p)
    {
        Imgproc.cvtColor(src8, rgb, Imgproc.COLOR_RGBA2RGB);
        Imgproc.cvtColor(rgb, lab, Imgproc.COLOR_RGB2Lab);
        List<Mat> channels = new List<Mat>();
        Core.split(lab, channels);

        // Updated contrast logic to start from p = 0
        float factor = (p < 0.5f) ? 1.0f - p / 0.5f * (1.0f - minContrast) : minContrast;
        Core.addWeighted(channels[0], factor, new Mat(channels[0].size(), channels[0].type(), new Scalar(128)), 1f - factor, 0, channels[0]);

        Core.merge(channels, lab);
        Imgproc.cvtColor(lab, rgb, Imgproc.COLOR_Lab2RGB);
        Imgproc.cvtColor(rgb, processed, Imgproc.COLOR_RGB2RGBA);

        int kSize = (p < 0.5f) ? 1 : (p < 0.75f) ? NextOdd((int)(1 + ((p - 0.5f) / 0.25f) * 4)) : NextOdd((int)(5 + ((p - 0.75f) / 0.25f) * 16));
        if (kSize > 1)
            Imgproc.GaussianBlur(processed, processed, new Size(kSize, kSize), 0);

        if (p >= 0.6f)
        {
            BuildSpotMask(p);

            Mat proc32 = new Mat();
            processed.convertTo(proc32, CvType.CV_32FC4);

            // Create dark overlay
            Mat darkOverlay = new Mat();
            Core.multiply(proc32, new Scalar(0.9, 0.9, 0.9, 0), darkOverlay); // Only dark RGB

            // Expand mask to 4 channels
            List<Mat> maskChannels = new List<Mat> { mask32, mask32, mask32, mask32 };
            Mat mask4 = new Mat();
            Core.merge(maskChannels, mask4);

            // Apply: darkened = original - (dark * mask)
            Core.multiply(darkOverlay, mask4, tmp4);
            Core.subtract(proc32, tmp4, tmp4);

            tmp4.convertTo(processed, CvType.CV_8UC4);

            mask4.release();
            darkOverlay.release();
            proc32.release();
        }
    }

    void BuildSpotMask(float p)
    {
        float t = Mathf.Clamp01((p - 0.6f) / 0.4f);
        mask32.setTo(new Scalar(0f));
        int h = mask32.rows(), w = mask32.cols();

        foreach (var s in spots)
        {
            float rx = Mathf.Max(1f, s.maxRx * t);
            float ry = Mathf.Max(1f, s.maxRy * t);
            float alpha = s.maxAlpha * t;

            for (int y = 0; y < h; y++)
            {
                for (int x = 0; x < w; x++)
                {
                    float dx = (x - s.center.x) / rx;
                    float dy = (y - s.center.y) / ry;
                    float dist = Mathf.Sqrt(dx * dx + dy * dy);

                    if (dist < 1f)
                    {
                        float current = (float)mask32.get(y, x)[0];
                        mask32.put(y, x, Mathf.Max(current, alpha));
                    }
                    else if (dist < 2f)
                    {
                        float fade = alpha * (1f - (dist - 1f));
                        float current = (float)mask32.get(y, x)[0];
                        mask32.put(y, x, Mathf.Max(current, fade));
                    }
                }
            }
        }

        int k = NextOdd((int)(101 + t * 50));
        Imgproc.GaussianBlur(mask32, mask32, new Size(k, k), 20 + t * 30);
    }

    int NextOdd(int n) => (n % 2 == 1) ? n : n + 1;

    void OnDestroy()
    {
        cam?.Stop();
        foreach (var m in new[] { src8, rgb, lab, processed, mask32, tmp4, ones })
            m?.Dispose();
    }
}
