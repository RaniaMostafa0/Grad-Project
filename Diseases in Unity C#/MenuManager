using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Central UI controller â€“ handles panel visibility, webcam management, and
/// toggles real-time retinal-disease effects.  Includes a Back button to
/// return to the disease-selection menu.
/// </summary>
public class MenuManager : MonoBehaviour
{
    /* ---------------- Inspector hooks ---------------- */
    [Header("Panels")]
    [SerializeField] private GameObject diseasesPanel;

    [Header("Buttons")]
    [SerializeField] private Button startButton;
    [SerializeField] private Button regularVisionButton;
    [SerializeField] private Button corticalButton;
    [SerializeField] private Button nuclearButton;
    [SerializeField] private Button traumaticButton;
    [SerializeField] private Button posteriorButton;
    [SerializeField] private Button stargardtButton;
    [SerializeField] private Button macularButton;
    [SerializeField] private Button rpButton;
    [SerializeField] private Button amdButton;
    [Space]
    [SerializeField] private Button backButton;          // NEW

    [Header("Slider")]
    [SerializeField] private Slider severitySlider;

    [Header("Display")]
    [SerializeField] private RawImage webcamDisplay;

    [Header("Effects")]
    [SerializeField] private CorticalCataractEffect corticalEffect;
    [SerializeField] private NuclearCataractEffect nuclearEffect;
    [SerializeField] private TraumaticCataractEffect traumaticEffect;
    [SerializeField] private PosteriorCataractEffect posteriorEffect;
    [SerializeField] private StargardtEffect stargardtEffect;
    [SerializeField] private MacularPuckerEffect macularEffect;
    [SerializeField] private RetinitisPigmentosaEffect rpEffect;
    [SerializeField] private AMDEffect amdEffect;

    /* ---------------- internal state ---------------- */
    private WebCamTexture cam;

    #region Unity lifecycle
    private void Awake()
    {
        /* ---- wire buttons ---- */
        startButton.onClick.AddListener(ShowDiseases);
        regularVisionButton.onClick.AddListener(StartRegularVision);
        corticalButton.onClick.AddListener(StartCorticalCataract);
        nuclearButton.onClick.AddListener(StartNuclearCataract);
        traumaticButton.onClick.AddListener(StartTraumaticCataract);
        posteriorButton.onClick.AddListener(StartPosteriorCataract);
        stargardtButton.onClick.AddListener(StartStargardt);
        macularButton.onClick.AddListener(StartMacularPucker);
        rpButton.onClick.AddListener(StartRP);
        backButton.onClick.AddListener(BackToMenu);           // NEW

        /* ---- initial UI ---- */
        diseasesPanel.SetActive(false);
        severitySlider.gameObject.SetActive(false);
        webcamDisplay.gameObject.SetActive(false);
        backButton.gameObject.SetActive(false);

        DisableAllEffects();
    }
    #endregion

    /* ---------------- navigation helpers ---------------- */
    public void ShowDiseases()
    {
        diseasesPanel.SetActive(true);
        startButton.gameObject.SetActive(false);
        backButton.gameObject.SetActive(false);
    }

    private void BackToMenu()
    {
        // Stop camera preview for performance (optional)
        if (cam != null && cam.isPlaying) cam.Pause();

        webcamDisplay.gameObject.SetActive(false);
        severitySlider.gameObject.SetActive(false);
        DisableAllEffects();

        diseasesPanel.SetActive(true);
        backButton.gameObject.SetActive(false);
    }

    private void EnsureCameraRunning()
    {
        if (cam == null)
            cam = new WebCamTexture(1280, 720);

        if (!cam.isPlaying) cam.Play();
        webcamDisplay.texture = cam;
        webcamDisplay.gameObject.SetActive(true);
    }

    private void HidePanelsForSimulation()
    {
        diseasesPanel.SetActive(false);
        backButton.gameObject.SetActive(true);
    }

    private void DisableAllEffects()
    {
        corticalEffect.enabled = false;
        nuclearEffect.enabled = false;
        traumaticEffect.enabled = false;
        posteriorEffect.enabled = false;
        stargardtEffect.enabled = false;
        macularEffect.enabled = false;
        rpEffect.enabled = false;
    }

    /* ---------------- mode wrappers ---------------- */
    public void StartRegularVision()
    {
        HidePanelsForSimulation();
        DisableAllEffects();
        severitySlider.gameObject.SetActive(false);
        EnsureCameraRunning();
    }

    public void StartCorticalCataract()
    {
        HidePanelsForSimulation();
        DisableAllEffects();
        EnsureCameraRunning();

        ShowSliderAndInitEffect(corticalEffect.Initialize, corticalEffect);
    }

    public void StartNuclearCataract()
    {
        HidePanelsForSimulation();
        DisableAllEffects();
        EnsureCameraRunning();

        ShowSliderAndInitEffect(nuclearEffect.Initialize, nuclearEffect);
    }

    public void StartTraumaticCataract()
    {
        HidePanelsForSimulation();
        DisableAllEffects();
        EnsureCameraRunning();

        ShowSliderAndInitEffect(traumaticEffect.Initialize, traumaticEffect);
    }

    public void StartPosteriorCataract()
    {
        HidePanelsForSimulation();
        DisableAllEffects();
        EnsureCameraRunning();

        ShowSliderAndInitEffect(posteriorEffect.Initialize, posteriorEffect);
    }

    public void StartStargardt()
    {
        HidePanelsForSimulation();
        DisableAllEffects();
        EnsureCameraRunning();

        ShowSliderAndInitEffect(stargardtEffect.Initialize, stargardtEffect);
    }

    public void StartMacularPucker()
    {
        HidePanelsForSimulation();
        DisableAllEffects();
        EnsureCameraRunning();

        ShowSliderAndInitEffect(macularEffect.Initialize, macularEffect);
    }

    public void StartRP()
    {
        HidePanelsForSimulation();
        DisableAllEffects();
        EnsureCameraRunning();

        ShowSliderAndInitEffect(rpEffect.Initialize, rpEffect);
    }

    public void StartAMDEffect()
    {
        HidePanelsForSimulation();
        DisableAllEffects();
        EnsureCameraRunning();

        ShowSliderAndInitEffect(amdEffect.Initialize, amdEffect);
    }





    /* ------------ helper to show slider & enable effect ------------ */
    private void ShowSliderAndInitEffect(System.Action<RawImage, Slider, WebCamTexture> init,
                                         Behaviour effectComponent)
    {
        severitySlider.value = 0f;
        severitySlider.gameObject.SetActive(true);

        init.Invoke(webcamDisplay, severitySlider, cam);
        effectComponent.enabled = true;
    }
}
