using UnityEngine;
using UnityEngine.UI;
using System.Collections;

public class MenuManager : MonoBehaviour
{
    [Header("Panels")]
    [SerializeField] private GameObject diseasesPanel;

    [Header("Buttons")]
    [SerializeField] private Button startButton;
    [SerializeField] private Button regularVisionButton;
    [SerializeField] private Button corticalButton;
    [SerializeField] private Button nuclearButton;
    [SerializeField] private Button traumaticButton;
    [SerializeField] private Button posteriorButton;
    [SerializeField] private Button stargardtButton;
    [SerializeField] private Button macularButton;
    [SerializeField] private Button rpButton;
    [SerializeField] private Button amdButton;
    [SerializeField] private Button hypertensiveButton;
    [SerializeField] private Button acuteCSCRButton;
    [SerializeField] private Button choroideremiaButton;
    [SerializeField] private Button pathologicMyopiaButton;
    [Space]
    [SerializeField] private Button backButton;

    [Header("Slider")]
    [SerializeField] private Slider severitySlider;

    [Header("Display")]
    [SerializeField] private RawImage webcamDisplay;

    [Header("Effects")]
    [SerializeField] private CorticalCataractEffect corticalEffect;
    [SerializeField] private NuclearCataractEffect nuclearEffect;
    [SerializeField] private TraumaticCataractEffect traumaticEffect;
    [SerializeField] private PosteriorCataractEffect posteriorEffect;
    [SerializeField] private StargardtEffect stargardtEffect;
    [SerializeField] private MacularPuckerEffect macularEffect;
    [SerializeField] private RetinitisPigmentosaEffect rpEffect;
    [SerializeField] private AMDEffect amdEffect;
    [SerializeField] private HypertensiveRetinopathyEffect hypertensiveEffect;
    [SerializeField] private AcuteCSCREffect acuteCSCREffect;
    [SerializeField] private ChoroideremiaEffect choroideremiaEffect;
    [SerializeField] private PathologicMyopiaEffect pathMyopiaEffect;

    private WebCamTexture cam;

    private void Awake()
    {
        startButton.onClick.AddListener(ShowDiseases);
        regularVisionButton.onClick.AddListener(StartRegularVision);
        corticalButton.onClick.AddListener(() => StartEffect(corticalEffect.Initialize, corticalEffect));
        nuclearButton.onClick.AddListener(() => StartEffect(nuclearEffect.Initialize, nuclearEffect));
        traumaticButton.onClick.AddListener(() => StartEffect(traumaticEffect.Initialize, traumaticEffect));
        posteriorButton.onClick.AddListener(() => StartEffect(posteriorEffect.Initialize, posteriorEffect));
        stargardtButton.onClick.AddListener(() => StartEffect(stargardtEffect.Initialize, stargardtEffect));
        macularButton.onClick.AddListener(() => StartEffect(macularEffect.Initialize, macularEffect));
        rpButton.onClick.AddListener(() => StartEffect(rpEffect.Initialize, rpEffect));
        amdButton.onClick.AddListener(() => StartEffect(amdEffect.Initialize, amdEffect));
        hypertensiveButton.onClick.AddListener(() => StartEffect(hypertensiveEffect.Initialize, hypertensiveEffect));
        acuteCSCRButton.onClick.AddListener(() => StartEffect(acuteCSCREffect.Initialize, acuteCSCREffect));
        choroideremiaButton.onClick.AddListener(() => StartEffect(choroideremiaEffect.Initialize, choroideremiaEffect));
        pathologicMyopiaButton.onClick.AddListener(() => StartEffect(pathMyopiaEffect.Initialize, pathMyopiaEffect));
        backButton.onClick.AddListener(BackToMenu);

        diseasesPanel.SetActive(false);
        severitySlider.gameObject.SetActive(false);
        webcamDisplay.gameObject.SetActive(false);
        backButton.gameObject.SetActive(false);

        DisableAllEffects();
    }

    public void ShowDiseases()
    {
        diseasesPanel.SetActive(true);
        startButton.gameObject.SetActive(false);
        backButton.gameObject.SetActive(false);
    }

    private void BackToMenu()
    {
        if (cam != null && cam.isPlaying) cam.Pause();

        webcamDisplay.gameObject.SetActive(false);
        severitySlider.gameObject.SetActive(false);
        severitySlider.value = 0f;
        DisableAllEffects();

        diseasesPanel.SetActive(true);
        backButton.gameObject.SetActive(false);
    }

    private void HidePanelsForSimulation()
    {
        diseasesPanel.SetActive(false);
        backButton.gameObject.SetActive(true);
    }

    private void DisableAllEffects()
    {
        corticalEffect.enabled = false;
        nuclearEffect.enabled = false;
        traumaticEffect.enabled = false;
        posteriorEffect.enabled = false;
        stargardtEffect.enabled = false;
        macularEffect.enabled = false;
        rpEffect.enabled = false;
        amdEffect.enabled = false;
        hypertensiveEffect.enabled = false;
        acuteCSCREffect.enabled = false;
        choroideremiaEffect.enabled = false;
        pathMyopiaEffect.enabled = false;
    }

    public void StartRegularVision()
    {
        HidePanelsForSimulation();
        DisableAllEffects();
        severitySlider.gameObject.SetActive(false);
        StartCoroutine(EnsureCameraOnly());
    }

    private IEnumerator EnsureCameraOnly()
    {
        if (cam == null)
            cam = new WebCamTexture(1280, 720);

        if (!cam.isPlaying)
            cam.Play();

        webcamDisplay.texture = cam;
        webcamDisplay.gameObject.SetActive(true);

        while (cam.width <= 16 || cam.height <= 16 || !cam.didUpdateThisFrame)
            yield return null;

        webcamDisplay.texture = cam;
    }

    private void StartEffect(System.Action<RawImage, Slider, WebCamTexture> init, Behaviour effectComponent)
    {
        HidePanelsForSimulation();
        DisableAllEffects();
        StartCoroutine(EnsureCameraAndStartEffectCoroutine(init, effectComponent));
    }

    private IEnumerator EnsureCameraAndStartEffectCoroutine(System.Action<RawImage, Slider, WebCamTexture> init, Behaviour effectComponent)
    {
        if (cam == null)
            cam = new WebCamTexture(1280, 720);

        if (!cam.isPlaying)
            cam.Play();

        webcamDisplay.texture = cam;
        webcamDisplay.gameObject.SetActive(true);

        while (cam.width <= 16 || cam.height <= 16 || !cam.didUpdateThisFrame)
            yield return null;

        severitySlider.value = 0f;
        severitySlider.gameObject.SetActive(true);

        init.Invoke(webcamDisplay, severitySlider, cam);
        effectComponent.enabled = true;

        // âœ… Force mask regeneration
        if (effectComponent is StargardtEffect se) se.ForceRefresh();
        else if (effectComponent is RetinitisPigmentosaEffect rp) rp.ForceRefresh();
    }
}
