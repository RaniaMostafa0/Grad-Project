using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Central UI controller – handles panel visibility, webcam management, and toggles real‑time cataract effects.
/// Regular vision and four diseases are supported:
/// • Cortical   • Nuclear   • Traumatic   • Posterior (glare/halo)
/// </summary>
public class MenuManager : MonoBehaviour
{
    /* ----------------------- Inspector hooks ----------------------- */
    [Header("Panels")]
    [SerializeField] private GameObject startPanel;
    [SerializeField] private GameObject diseasesPanel;

    [Header("Buttons")]
    [SerializeField] private Button startButton;
    [SerializeField] private Button regularVisionButton;
    [SerializeField] private Button corticalButton;
    [SerializeField] private Button nuclearButton;
    [SerializeField] private Button traumaticButton;
    //[SerializeField] private Button posteriorButton;
    [SerializeField] private Button stargardtButton;
    [SerializeField] private Button macularButton;


    [Header("Slider")]
    [SerializeField] private Slider severitySlider;       // shared by all diseases

    [Header("Display")]
    [SerializeField] private RawImage webcamDisplay;

    [Header("Effects")]
    [SerializeField] private CorticalCataractEffect corticalEffect;
    [SerializeField] private NuclearCataractEffect nuclearEffect;
    [SerializeField] private TraumaticCataractEffect traumaticEffect;
    [SerializeField] private PosteriorCataractEffect posteriorEffect;
    [SerializeField] private StargardtEffect stargardtEffect;
    [SerializeField] private RetinitisPigmentosaEffect rpEffect;
    [SerializeField] private MacularPuckerEffect macularEffect;


    /* ----------------------- private state ------------------------ */
    private WebCamTexture cam;   // one camera reused across modes

    #region Unity lifecycle
    private void Awake()
    {
        // Button → handler wiring
        startButton.onClick.AddListener(ShowDiseases);
        regularVisionButton.onClick.AddListener(StartRegularVision);
        corticalButton.onClick.AddListener(StartCorticalCataract);
        nuclearButton.onClick.AddListener(StartNuclearCataract);
        traumaticButton.onClick.AddListener(StartTraumaticCataract);
        //posteriorButton.onClick.AddListener(StartPosteriorCataract);
        stargardtButton.onClick.AddListener(StartStargardt);
        macularButton.onClick.AddListener(StartMacularPucker);

        // Initial UI state
        diseasesPanel.SetActive(false);
        severitySlider.gameObject.SetActive(false);
        webcamDisplay.gameObject.SetActive(false);

        DisableAllEffects();
    }
    #endregion

    /* ----------------------- Menu navigation ---------------------- */
    public void ShowDiseases()
    {
        startPanel.SetActive(false);
        diseasesPanel.SetActive(true);
    }

    /* ----------------------- Helpers ------------------------------ */
    private void EnsureCameraRunning()
    {
        if (cam == null)
        {
            cam = new WebCamTexture(1280, 720);
            cam.Play();
        }
        else if (!cam.isPlaying)
        {
            cam.Play();
        }
        webcamDisplay.texture = cam;
        webcamDisplay.gameObject.SetActive(true);
    }

    private void HidePanels()
    {
        startPanel.SetActive(false);
        diseasesPanel.SetActive(false);
    }

    private void DisableAllEffects()
    {
        corticalEffect.enabled = false;
        nuclearEffect.enabled = false;
        traumaticEffect.enabled = false;
        posteriorEffect.enabled = false;
    }

    /* ----------------------- Modes ------------------------------- */
    public void StartRegularVision()
    {
        HidePanels();
        DisableAllEffects();
        severitySlider.gameObject.SetActive(false);
        EnsureCameraRunning();           // raw webcam feed
    }

    public void StartCorticalCataract()
    {
        HidePanels();
        DisableAllEffects();
        EnsureCameraRunning();

        severitySlider.value = 0f;
        severitySlider.gameObject.SetActive(true);

        corticalEffect.Initialize(webcamDisplay, severitySlider, cam);
        corticalEffect.enabled = true;
    }

    public void StartNuclearCataract()
    {
        HidePanels();
        DisableAllEffects();
        EnsureCameraRunning();

        severitySlider.value = 0f;
        severitySlider.gameObject.SetActive(true);

        nuclearEffect.Initialize(webcamDisplay, severitySlider, cam);
        nuclearEffect.enabled = true;
    }

    public void StartTraumaticCataract()
    {
        HidePanels();
        DisableAllEffects();
        EnsureCameraRunning();

        severitySlider.value = 0f;
        severitySlider.gameObject.SetActive(true);

        traumaticEffect.Initialize(webcamDisplay, severitySlider, cam);
        traumaticEffect.enabled = true;
    }

    public void StartPosteriorCataract()            
    {
        HidePanels();
        DisableAllEffects();
        EnsureCameraRunning();

        severitySlider.value = 0f;
        severitySlider.gameObject.SetActive(true);

        posteriorEffect.Initialize(webcamDisplay, severitySlider, cam);
        posteriorEffect.enabled = true;
    }

    public void StartStargardt()
    {
        HidePanels();
        DisableAllEffects();
        EnsureCameraRunning();

        severitySlider.value = 0f;
        severitySlider.gameObject.SetActive(true);

        stargardtEffect.Initialize(webcamDisplay, severitySlider, cam);
        stargardtEffect.enabled = true;
    }

    public void StartRP()
    {
        HidePanels();
        DisableAllEffects();
        EnsureCameraRunning();

        severitySlider.value = 0f;
        severitySlider.gameObject.SetActive(true);

        rpEffect.Initialize(webcamDisplay, severitySlider, cam);
        rpEffect.enabled = true;
    }

    public void StartMacularPucker()                // NEW
    {
        HidePanels(); DisableAllEffects(); EnsureCameraRunning();
        severitySlider.value = 0f; severitySlider.gameObject.SetActive(true);
        macularEffect.Initialize(webcamDisplay, severitySlider, cam);
        macularEffect.enabled = true;
    }

}
