using UnityEngine;
using UnityEngine.UI;
using OpenCVForUnity.CoreModule;
using OpenCVForUnity.ImgprocModule;
using OpenCVForUnity.UnityUtils;
using System.Collections;

[RequireComponent(typeof(RawImage))]
public class RetinitisPigmentosaEffect : MonoBehaviour
{
    /* ───────────── Inspector settings ───────────── */
    [Header("Tunnel-Vision Parameters")]
    [SerializeField] private int   blurSize       = 51;   // Gaussian kernel (odd)
    [SerializeField] private float tunnelStrength = 1.0f; // reserved for future use

    /* ───────────── Runtime references ───────────── */
    private RawImage display;
    private Slider   intensitySlider;
    private WebCamTexture cam;
    private Texture2D tex;

    /* ───────────── OpenCV mats ───────────── */
    private Mat matInput, matProcessed;  // 8UC4
    private Mat matFloat;                // 32FC4 – temporary buffer
    private Mat tunnelMask;              // 32F   – 1-channel, 0-1
    private Mat noiseMap;                // 32F   – per-pixel noise (-1 … 1)
    private Mat radiusMap;               // 32F   – per-pixel distance from centre
    private Mat irregular;               // 32F   – helper
    private Mat mask4;                   // 32FC4 – expanded RGBA mask

    private bool  initialized     = false;
    private float lastSliderValue = -1f; // so we build the mask only when slider moves

    /* ─────────────────────────────────────────────── */

    /** Public entry point from your MenuManager */
    public void Initialize(RawImage target, Slider slider, WebCamTexture sharedCam)
    {
        display        = target;
        intensitySlider = slider;
        cam             = sharedCam;

        if (!cam.isPlaying) cam.Play();
        StartCoroutine(WaitForWebCamInit());
    }

    IEnumerator WaitForWebCamInit()
    {
        while (cam.width <= 16) yield return null;     // wait until webcam initialises

        int w = cam.width;
        int h = cam.height;

        tex            = new Texture2D(w, h, TextureFormat.RGBA32, false);
        display.texture = tex;

        matInput     = new Mat(h, w, CvType.CV_8UC4);
        matProcessed = new Mat(h, w, CvType.CV_8UC4);
        matFloat     = new Mat(h, w, CvType.CV_32FC4);

        tunnelMask = new Mat(h, w, CvType.CV_32F);
        noiseMap   = GenerateNoiseMap(h, w);
        radiusMap  = CreateRadiusMap(h, w);
        irregular  = new Mat(h, w, CvType.CV_32F);
        mask4      = new Mat(h, w, CvType.CV_32FC4);

        initialized = true;
    }

    /* ───────────────────────── Update ───────────────────────── */
    void Update()
    {
        if (!initialized || !cam.didUpdateThisFrame) return;

        Utils.webCamTextureToMat(cam, matInput);

        float t = intensitySlider ? intensitySlider.value : 0f;
        if (!Mathf.Approximately(t, lastSliderValue))
        {
            float p = Mathf.Clamp01(t * t);            // non-linear progression
            GenerateIrregularTunnelMask(p);
            lastSliderValue = t;
        }

        ApplyTunnelEffect();
        Utils.fastMatToTexture2D(matProcessed, tex);   // upload to GPU
    }

    /* ───────────────────────── Mask building ───────────────────────── */
    /// Builds distance-from-centre map once (runs only during Init)
    private Mat CreateRadiusMap(int h, int w)
    {
        Mat r = new Mat(h, w, CvType.CV_32F);
        float cx = w * 0.5f, cy = h * 0.5f;

        // one-time loop is fine – never runs per-frame
        for (int y = 0; y < h; y++)
        {
            float dy2 = (y - cy) * (y - cy);
            for (int x = 0; x < w; x++)
            {
                float dx2 = (x - cx) * (x - cx);
                r.put(y, x, Mathf.Sqrt(dx2 + dy2));
            }
        }
        return r;
    }

    /// Generates noise-warped tunnel mask with vectorised OpenCV ops
    private void GenerateIrregularTunnelMask(float p)
    {
        if (p <= 0f)
        {
            tunnelMask.setTo(new Scalar(1f));
            return;
        }

        float baseRadius = Mathf.Lerp(Mathf.Min(matInput.cols(), matInput.rows()) * 0.5f, 0f, p);

        // irregular = baseR * (1 + 0.4*noise)
        Core.multiply(noiseMap, new Scalar(0.4f), irregular);       // 0.4 * noise
        Core.add(irregular, Scalar.all(1.0), irregular);            // 1 + …
        Core.multiply(irregular, new Scalar(baseRadius), irregular);

        // tunnelMask = clamp01( (irregular-radius) / fade )
        const float fade = 80f;
        Core.subtract(irregular, radiusMap, tunnelMask);
        Core.divide(tunnelMask, new Scalar(fade), tunnelMask);
        Core.min(tunnelMask, new Scalar(1f), tunnelMask);
        Core.max(tunnelMask, new Scalar(0f), tunnelMask);

        Imgproc.GaussianBlur(tunnelMask, tunnelMask, new Size(blurSize, blurSize), 0);
    }

    /* ───────────────────────── Effect application ───────────────────────── */
    private void ApplyTunnelEffect()
    {
        // Expand 1-channel mask to 4 and multiply
        Imgproc.cvtColor(tunnelMask, mask4, Imgproc.COLOR_GRAY2RGBA);

        matInput.convertTo(matFloat, CvType.CV_32FC4);
        Core.multiply(matFloat, mask4, matFloat);          // per-pixel RGB*mask
        matFloat.convertTo(matProcessed, CvType.CV_8UC4);  // back to 8-bit
    }

    /* ───────────────────────── Utilities ───────────────────────── */
    private Mat GenerateNoiseMap(int h, int w)
    {
        Mat n = new Mat(h, w, CvType.CV_32F);
        Core.randn(n, 0.0, 1.0);
        Imgproc.GaussianBlur(n, n, new Size(blurSize, blurSize), 0);

        // normalise to [-1 … 1]
        Core.MinMaxLocResult mm = Core.minMaxLoc(n);
        Core.subtract(n, new Scalar(mm.minVal), n);
        Core.divide(n,  new Scalar(mm.maxVal - mm.minVal), n);
        Core.multiply(n, new Scalar(2.0), n);
        Core.subtract(n, new Scalar(1.0), n);
        return n;
    }

    /* ───────────────────────── Cleanup ───────────────────────── */
    void OnDestroy()
    {
        cam?.Stop();
        matInput?.Dispose(); matProcessed?.Dispose(); matFloat?.Dispose();
        tunnelMask?.Dispose(); noiseMap?.Dispose(); radiusMap?.Dispose();
        irregular?.Dispose(); mask4?.Dispose();
    }
}
