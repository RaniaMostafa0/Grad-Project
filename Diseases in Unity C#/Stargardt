using UnityEngine;
using UnityEngine.UI;
using OpenCVForUnity.CoreModule;
using OpenCVForUnity.ImgprocModule;
using OpenCVForUnity.UnityUtils;
using System.Collections;

[RequireComponent(typeof(RawImage))]
public class StargardtEffect : MonoBehaviour
{
    [Header("Stargardt Parameters")]
    [Tooltip("Gaussian-blur kernel (odd number)")]
    [SerializeField] private int maxKernelSize = 51;

    [Tooltip("Maximum radius of central vision loss in pixels")]
    [SerializeField] private float maxCentralLossRadius = 400f;   // ← was 200

    [Tooltip("Random rim roughness extent in pixels")]
    [SerializeField] private float maxExtension = 75f;

    /* ─── Runtime refs ─── */
    private RawImage      display;
    private Slider        intensitySlider;
    private WebCamTexture cam;
    private Texture2D     tex;

    /* ─── OpenCV buffers ─── */
    private Mat matInput, matProcessed, matFloat;
    private Mat stargardtMask, noiseMap, radiusMap, irregular, mask4;

    private bool  initialised     = false;
    private float lastSliderValue = -1f;

    /* ────────── Public entry point ────────── */
    public void Initialize(RawImage target, Slider slider, WebCamTexture sharedCam)
    {
        display         = target;
        intensitySlider = slider;
        cam             = sharedCam;

        if (!cam.isPlaying) cam.Play();
        StartCoroutine(WaitForWebCamInit());
    }

    IEnumerator WaitForWebCamInit()
    {
        while (cam.width <= 16) yield return null;          // wait for camera

        int w = cam.width, h = cam.height;

        tex            = new Texture2D(w, h, TextureFormat.RGBA32, false);
        display.texture = tex;

        matInput     = new Mat(h, w, CvType.CV_8UC4);
        matProcessed = new Mat(h, w, CvType.CV_8UC4);
        matFloat     = new Mat(h, w, CvType.CV_32FC4);

        stargardtMask = new Mat(h, w, CvType.CV_32F);
        noiseMap      = GenerateStaticNoiseMap(h, w);
        radiusMap     = CreateRadiusMap(h, w);
        irregular     = new Mat(h, w, CvType.CV_32F);
        mask4         = new Mat(h, w, CvType.CV_32FC4);

        initialised = true;
    }

    /* ────────── Update ────────── */
    void Update()
    {
        if (!initialised || !cam.didUpdateThisFrame) return;

        Utils.webCamTextureToMat(cam, matInput);

        float t = intensitySlider ? intensitySlider.value : 0f;
        if (!Mathf.Approximately(t, lastSliderValue))
        {
            GenerateStargardtMask(Mathf.Clamp01(t * t));   // non-linear
            lastSliderValue = t;
        }

        ApplyEffect();
        Utils.fastMatToTexture2D(matProcessed, tex);
    }

    /* ────────── Mask generation ────────── */
    private void GenerateStargardtMask(float p)
    {
        if (p <= 0f) { stargardtMask.setTo(new Scalar(1f)); return; }

        float radius    = maxCentralLossRadius * p;      // bigger spot
        float extension = maxExtension        * p;
        float fade      = Mathf.Max(1f, 40f * p);

        // irregular = radius + noise*extension
        Core.multiply(noiseMap, new Scalar(extension), irregular);
        Core.add(irregular, new Scalar(radius), irregular);

        // mask = clamp01( (dist - (irregular - fade/2)) / fade );
        Core.subtract(radiusMap, irregular, stargardtMask);
        Core.add(stargardtMask, new Scalar(fade * 0.5f), stargardtMask);
        Core.divide(stargardtMask, new Scalar(fade), stargardtMask);
        Core.min(stargardtMask, new Scalar(1f), stargardtMask);
        Core.max(stargardtMask, new Scalar(0f), stargardtMask);

        Imgproc.GaussianBlur(stargardtMask, stargardtMask,
                             new Size(maxKernelSize, maxKernelSize), 0);
    }

    /* ────────── Apply effect ────────── */
    private void ApplyEffect()
    {
        Imgproc.cvtColor(stargardtMask, mask4, Imgproc.COLOR_GRAY2RGBA);

        matInput.convertTo(matFloat, CvType.CV_32FC4);
        Core.multiply(matFloat, mask4, matFloat);
        matFloat.convertTo(matProcessed, CvType.CV_8UC4);
    }

    /* ────────── Helpers ────────── */
    private Mat CreateRadiusMap(int h, int w)
    {
        Mat r = new Mat(h, w, CvType.CV_32F);
        float cx = w * 0.5f, cy = h * 0.5f;
        for (int y = 0; y < h; y++)
        {
            float dy2 = (y - cy) * (y - cy);
            for (int x = 0; x < w; x++)
                r.put(y, x, Mathf.Sqrt((x - cx) * (x - cx) + dy2));
        }
        return r;
    }

    private Mat GenerateStaticNoiseMap(int h, int w, int blur = 51)
    {
        Mat n = new Mat(h, w, CvType.CV_32F);
        Core.randn(n, 0.0, 1.0);
        Imgproc.GaussianBlur(n, n, new Size(blur, blur), 0);

        Core.MinMaxLocResult mm = Core.minMaxLoc(n);
        Core.subtract(n, new Scalar(mm.minVal), n);
        Core.divide(n,  new Scalar(mm.maxVal - mm.minVal), n);
        Core.multiply(n, new Scalar(2.0), n);
        Core.subtract(n, new Scalar(1.0), n);            // now in [-1,1]
        return n;
    }

    /* ────────── Cleanup ────────── */
    void OnDestroy()
    {
        cam?.Stop();
        matInput?.Dispose();   matProcessed?.Dispose(); matFloat?.Dispose();
        stargardtMask?.Dispose(); noiseMap?.Dispose(); radiusMap?.Dispose();
        irregular?.Dispose();   mask4?.Dispose();
    }
}
