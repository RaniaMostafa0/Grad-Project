import cv2
import numpy as np
import time
import pygame
from pygame.locals import *

# Slider parameters
SLIDER_HEIGHT = 20
SLIDER_COLOR = (100, 100, 100)
THUMB_COLOR = (200, 200, 200)
THUMB_WIDTH = 40

def process_frame(frame, p):
    """
    Process a frame to simulate nuclear cataract progression.
    
    Parameters:
    - frame: Input BGR frame.
    - p: Progression factor (0 to 1) from the slider.
    """
    # Flip frame to correct webcam mirroring
    frame = cv2.flip(frame, 1)

    # Phase 1: 0 to 0.25 - No symptoms
    if p <= 0.25:
        return frame.copy()

    # Phase 2: 0.25 to 0.5 - Yellow pigmentation
    yellow_factor = min(1.0, max(0.0, (p - 0.25) / 0.25))
    blue_factor = 1 - 0.5 * yellow_factor  # Blue from 1 to 0.5
    yellow_tint = np.array([blue_factor, 1.0, 1.0], dtype=np.float32)  # [B, G, R]
    yellow_frame = frame.astype(np.float32) * yellow_tint
    yellow_frame = np.clip(yellow_frame, 0, 255).astype(np.uint8)

    # Phase 3: 0.5 to 1 - Severe blur/cloudiness
    if p > 0.5:
        blur_factor = min(1.0, max(0.0, (p - 0.5) / 0.5))
        kernel_size = int(1 + 30 * blur_factor)  # 1 to 31 for severe blur
        kernel_size = kernel_size if kernel_size % 2 == 1 else kernel_size + 1
        sigma = 10 * blur_factor  # 0 to 10 for cloudy effect
        blurred_frame = cv2.GaussianBlur(yellow_frame, (kernel_size, 1), sigma)  # Horizontal
        blurred_frame = cv2.GaussianBlur(blurred_frame, (1, kernel_size), sigma)  # Vertical
    else:
        blurred_frame = yellow_frame

    return blurred_frame

def display_frame_with_pygame(frame, screen, scroll_pos, max_scroll):
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    screen_width, screen_height = screen.get_size()
    frame_height, frame_width = frame_rgb.shape[:2]

    display_height = screen_height - SLIDER_HEIGHT - 20
    scale = screen_width / frame_width
    new_width = screen_width
    new_height = int(frame_height * scale)

    resized_frame = cv2.resize(frame_rgb, (new_width, new_height))
    if new_height > display_height:
        crop_start = (new_height - display_height) // 2
        crop_end = crop_start + display_height
        cropped_frame = resized_frame[crop_start:crop_end, :]
    else:
        cropped_frame = np.zeros((display_height, screen_width, 3), dtype=np.uint8)
        y_offset = (display_height - new_height) // 2
        cropped_frame[y_offset:y_offset + new_height, :] = resized_frame

    frame_surface = pygame.surfarray.make_surface(cropped_frame.transpose([1, 0, 2]))
    full_surface = pygame.Surface((screen_width, screen_height))
    full_surface.fill((0, 0, 0))
    full_surface.blit(frame_surface, (0, 0))

    # Draw the slider
    SLIDER_X = 20
    SLIDER_Y = screen_height - SLIDER_HEIGHT - 20
    SLIDER_WIDTH = screen_width - 40
    pygame.draw.rect(full_surface, SLIDER_COLOR, (SLIDER_X, SLIDER_Y, SLIDER_WIDTH, SLIDER_HEIGHT))
    thumb_x = SLIDER_X + scroll_pos
    pygame.draw.rect(full_surface, THUMB_COLOR, (thumb_x, SLIDER_Y, THUMB_WIDTH, SLIDER_HEIGHT))

    screen.blit(full_surface, (0, 0))
    pygame.display.flip()

def simulate_cataract_realtime_pygame(webcam_index=0, resolution=(1280, 720)):
    pygame.init()
    pygame.display.set_caption("Nuclear Cataract Simulation")
    display_info = pygame.display.Info()
    screen_width, screen_height = display_info.current_w, display_info.current_h
    screen = pygame.display.set_mode((screen_width, screen_height), pygame.FULLSCREEN)

    # Slider variables
    scroll_pos = 0
    SLIDER_X = 20
    SLIDER_WIDTH = screen_width - 40
    max_scroll = SLIDER_WIDTH - THUMB_WIDTH
    dragging = False

    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Error: Unable to access webcam.")
        pygame.quit()
        return

    cap.set(cv2.CAP_PROP_FRAME_WIDTH, resolution[0])
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, resolution[1])

    frame_count = 0
    total_time = 0
    clock = pygame.time.Clock()

    print("Press 'ESC' or close the window to stop. Drag the slider to adjust cataract severity.")

    try:
        while True:
            for event in pygame.event.get():
                if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                    raise KeyboardInterrupt
                elif event.type == MOUSEBUTTONDOWN:
                    mouse_x, mouse_y = event.pos
                    SLIDER_Y = screen_height - SLIDER_HEIGHT - 20
                    if (SLIDER_X <= mouse_x <= SLIDER_X + SLIDER_WIDTH and
                        SLIDER_Y <= mouse_y <= SLIDER_Y + SLIDER_HEIGHT):
                        dragging = True
                elif event.type == MOUSEBUTTONUP:
                    dragging = False
                elif event.type == MOUSEMOTION and dragging:
                    mouse_x, _ = event.pos
                    scroll_pos = max(0, min(mouse_x - SLIDER_X - THUMB_WIDTH // 2, max_scroll))

            ret, frame = cap.read()
            if not ret:
                print("Error: Unable to read frame from webcam.")
                break

            start_time = time.time()
            p = scroll_pos / max_scroll
            processed_frame = process_frame(frame, p)
            display_frame_with_pygame(processed_frame, screen, scroll_pos, max_scroll)

            processing_time = time.time() - start_time
            total_time += processing_time
            frame_count += 1
            fps = 1 / processing_time if processing_time > 0 else 0
            pygame.display.set_caption(f"Nuclear Cataract Simulation - FPS: {fps:.2f} - Severity: {p:.2f}")

            clock.tick(60)

    except KeyboardInterrupt:
        print("\nExiting real-time video processing.")
    finally:
        cap.release()
        pygame.quit()
        if frame_count > 0:
            print(f"Total frames processed: {frame_count}")
            print(f"Total processing time: {total_time:.4f} seconds")
            print(f"Average FPS: {frame_count / total_time:.2f}")

if __name__ == "__main__":
    simulate_cataract_realtime_pygame(webcam_index=1, resolution=(1280, 720))
