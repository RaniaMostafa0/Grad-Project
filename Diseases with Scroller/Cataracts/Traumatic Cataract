import cv2
import numpy as np
import time
import pygame
from pygame.locals import QUIT, KEYDOWN, K_ESCAPE
from threading import Thread, Event
from queue import Queue


def process_frame(frame, blur_intensity):
    """
    Process a single frame by applying Gaussian blur with adjustable intensity.
    """
    # Apply Gaussian blur with dynamic kernel size
    kernel_size = int(blur_intensity * 30)  # Scale kernel size based on intensity
    kernel_size = max(1, kernel_size)  # Ensure kernel size is at least 1
    if kernel_size % 2 == 0:
        kernel_size += 1  # Ensure kernel size is odd
    blurred_frame = cv2.GaussianBlur(frame, (kernel_size, kernel_size), 0)
    return blurred_frame


def get_scaled_dimensions(original_size, target_size):
    """
    Calculate the new size to maintain aspect ratio.

    Parameters:
    - original_size: Tuple of (width, height) of the original image.
    - target_size: Tuple of (width, height) of the target display.

    Returns:
    - new_size: Tuple of (width, height) after scaling.
    - position: Tuple of (x, y) position to center the image.
    """
    original_width, original_height = original_size
    target_width, target_height = target_size

    # Calculate scaling factor to fit the image within the target dimensions
    scale_factor = min(target_width / original_width, target_height / original_height)

    # Calculate new dimensions
    new_width = int(original_width * scale_factor)
    new_height = int(original_height * scale_factor)

    # Calculate position to center the image
    x_pos = (target_width - new_width) // 2
    y_pos = (target_height - new_height) // 2

    return (new_width, new_height), (x_pos, y_pos)


def video_reader(cap, frame_queue, stop_event):
    """
    Reads frames from the video capture and pushes them to a queue.
    """
    while not stop_event.is_set():
        ret, frame = cap.read()
        if not ret:
            stop_event.set()
            break
        frame_queue.put(frame)


def realtime_video_processing_pygame(webcam_index=0, resolution=(1280, 720)):
    """
    Real-time processing of video frames from a webcam using Pygame for display.

    Parameters:
    - webcam_index: Index of the webcam (default is 0).
    - resolution: Tuple specifying the resolution (width, height).
    """
    # Initialize Pygame
    pygame.init()
    pygame.display.set_caption("Real-Time Gaussian Blur Simulation")

    # Set up the display
    screen_width, screen_height = resolution
    screen = pygame.display.set_mode((screen_width, screen_height), pygame.FULLSCREEN)

    # Open the webcam
    cap = cv2.VideoCapture(webcam_index)

    if not cap.isOpened():
        print("Error: Unable to access webcam.")
        pygame.quit()
        return

    # Set the webcam resolution to match desired processing resolution
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, resolution[0])
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, resolution[1])

    # Initialize threading components
    frame_queue = Queue(maxsize=10)  # Queue to hold frames
    stop_event = Event()  # Event to signal threads to stop

    # Start the frame reader thread
    reader_thread = Thread(target=video_reader, args=(cap, frame_queue, stop_event))
    reader_thread.start()

    # Track FPS
    frame_count = 0
    total_time = 0

    # Slider properties
    SCROLLBAR_HEIGHT = 20
    SCROLLBAR_COLOR = (100, 100, 100)
    THUMB_COLOR = (200, 200, 200)
    THUMB_WIDTH = 40

    scroll_pos = 0
    max_scroll = screen_width - THUMB_WIDTH
    dragging = False

    print("Press 'ESC' or close the window to stop the simulation.")

    clock = pygame.time.Clock()

    try:
        while True:
            for event in pygame.event.get():
                if event.type == QUIT:
                    raise KeyboardInterrupt
                if event.type == KEYDOWN:
                    if event.key == K_ESCAPE:
                        raise KeyboardInterrupt
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    if event.button == 1:  # Left mouse button
                        mouse_x, mouse_y = event.pos
                        if screen_height - SCROLLBAR_HEIGHT <= mouse_y <= screen_height:
                            dragging = True
                elif event.type == pygame.MOUSEBUTTONUP:
                    dragging = False
                elif event.type == pygame.MOUSEMOTION:
                    if dragging:
                        mouse_x, mouse_y = event.pos
                        scroll_pos = max(0, min(mouse_x - THUMB_WIDTH // 2, max_scroll))

            if not frame_queue.empty():
                frame = frame_queue.get()

                # Start timing
                start_time = time.time()

                # Calculate the blur intensity based on the slider position
                blur_intensity = scroll_pos / max_scroll  # Normalized to [0, 1]

                # Process the frame with dynamic blur intensity
                processed_frame = process_frame(frame, blur_intensity)

                # Convert BGR to RGB
                frame_rgb = cv2.cvtColor(processed_frame, cv2.COLOR_BGR2RGB)

                # Get original frame size
                original_size = frame_rgb.shape[1], frame_rgb.shape[0]  # (width, height)

                # Calculate scaled size and position to maintain aspect ratio
                scaled_size, position = get_scaled_dimensions(original_size, (screen_width, screen_height))

                # Resize frame while maintaining aspect ratio
                frame_resized = cv2.resize(frame_rgb, scaled_size, interpolation=cv2.INTER_AREA)

                # Convert to Pygame surface
                frame_surface = pygame.surfarray.make_surface(np.rot90(frame_resized))

                # Clear the screen by filling it with black
                screen.fill((0, 0, 0))

                # Blit the frame to the screen at the calculated position
                screen.blit(frame_surface, position)

                # Draw the scrollbar
                pygame.draw.rect(screen, SCROLLBAR_COLOR, (0, screen_height - SCROLLBAR_HEIGHT, screen_width, SCROLLBAR_HEIGHT))
                pygame.draw.rect(screen, THUMB_COLOR, (scroll_pos, screen_height - SCROLLBAR_HEIGHT, THUMB_WIDTH, SCROLLBAR_HEIGHT))

                pygame.display.flip()

                # Calculate FPS
                processing_time = time.time() - start_time
                total_time += processing_time
                frame_count += 1
                fps = 1 / processing_time if processing_time > 0 else 0

                # Optionally, you can display FPS on the window title
                pygame.display.set_caption(f"Real-Time Gaussian Blur Simulation - FPS: {fps:.2f}")

            # Limit to 60 FPS
            clock.tick(60)

    except KeyboardInterrupt:
        print("\nExiting real-time video processing.")

    finally:
        # Signal the reader thread to stop and wait for it to finish
        stop_event.set()
        reader_thread.join()
        cap.release()
        pygame.quit()
        if frame_count > 0:
            average_processing_time = total_time / frame_count
            overall_fps = frame_count / total_time
            print(f"Total frames processed: {frame_count}")
            print(f"Total processing time: {total_time:.4f} seconds")
            print(f"Average processing time per frame: {average_processing_time:.4f} seconds")
            print(f"Real-time processing FPS: {overall_fps:.2f}")


# Example usage
if __name__ == "__main__":
    realtime_video_processing_pygame(webcam_index=0, resolution=(1280, 720))
