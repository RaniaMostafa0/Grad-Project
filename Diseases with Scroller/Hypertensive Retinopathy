import cv2
import numpy as np
import pygame
from pygame.locals import *

# Enable GPU acceleration in OpenCV if available
cv2.setUseOptimized(True)
cv2.ocl.setUseOpenCL(True)

# Scrollbar parameters
SCROLLBAR_HEIGHT = 20
SCROLLBAR_COLOR = (100, 100, 100)  # Gray
THUMB_COLOR = (200, 200, 200)      # Light gray
THUMB_WIDTH = 40

# Ensure kernel size is an odd integer
def next_odd(n):
    n = int(n + 0.5)
    return n if n % 2 == 1 else n + 1

# Generate non-overlapping spot positions
def generate_spot_positions(h, w, num_spots=25, min_distance=100):
    positions = []
    for _ in range(num_spots):
        attempts = 0
        while attempts < 100:
            cx = np.random.randint(0, w)
            cy = np.random.randint(0, h)
            if all(np.sqrt((cx - px)**2 + (cy - py)**2) >= min_distance for px, py in positions):
                positions.append((cx, cy))
                break
            attempts += 1
        if attempts >= 100:
            print("Warning: Could not place spot without overlap after 100 attempts.")
    return positions

# Apply contrast reduction using LAB color space
def apply_contrast_reduction(image, factor):
    lab = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)
    l = cv2.addWeighted(l, factor, np.full_like(l, 128, dtype=np.uint8), 1 - factor, 0)
    reduced_lab = cv2.merge((l, a, b))
    return cv2.cvtColor(reduced_lab, cv2.COLOR_LAB2BGR)

# Apply Gaussian blur
def apply_blur(image, kernel_size):
    if kernel_size[0] <= 1 or kernel_size[1] <= 1:
        return image
    return cv2.GaussianBlur(image, kernel_size, 0)

# Create mask with elliptical spots and transition zones
def create_mask(h, w, spots, p):
    if p < 0.6:
        return np.zeros((h, w), dtype=np.float32)
    t = (p - 0.6) / 0.4  # Scale from 0 at p=0.6 to 1 at p=1.0
    mask = np.zeros((h, w), dtype=np.float32)
    y, x = np.ogrid[:h, :w]
    for spot in spots:
        cx, cy = spot['center']
        max_rx = spot['max_radius_x']
        max_ry = spot['max_radius_y']
        max_trans = spot['max_transparency']
        rx = t * max_rx
        ry = t * max_ry
        trans = t * max_trans
        if rx < 1 or ry < 1:  # Skip if spot is too small
            continue
        # Compute distance for ellipse
        distance = np.sqrt(((x - cx) / rx)**2 + ((y - cy) / ry)**2)
        # Core of the spot
        mask[distance < 1] = np.maximum(mask[distance < 1], trans)
        # Transition zone (distance 1 to 2)
        transition = (distance >= 1) & (distance < 2)
        if transition.any():
            fade = trans * (1 - (distance[transition] - 1))
            mask[transition] = np.maximum(mask[transition], fade)
    # Apply Gaussian blur to mask
    kernel_size = next_odd(101 + t * 50)  # From 101 to 151
    sigma = 20 + t * 30  # From 20 to 50
    mask = cv2.GaussianBlur(mask, (kernel_size, kernel_size), sigma)
    return np.clip(mask, 0, 1)

# Process frame with gradual symptom progression
def process_frame(frame, p, spots):
    #flipped_frame = cv2.flip(frame, 1)  # Mirror webcam feed
    # Contrast reduction
    if p < 0.25:
        factor = 1.0
    elif p < 0.5:
        factor = 1.0 - (p - 0.25) / 0.25 * 0.5  # From 1.0 to 0.5
    else:
        factor = 0.5
    contrast_reduced = apply_contrast_reduction(frame, factor)
    # Blur
    if p < 0.5:
        k = 1
    elif p < 0.75:
        t1 = (p - 0.5) / 0.25
        k = next_odd(1 + t1 * 4)  # From 1 to 5
    else:
        t2 = (p - 0.75) / 0.25
        k = next_odd(5 + t2 * 16)  # From 5 to 21
    kernel_size = (k, k)
    blurred_frame = apply_blur(contrast_reduced, kernel_size)
    # Black spots
    if p >= 0.6:
        h, w = blurred_frame.shape[:2]
        mask = create_mask(h, w, spots, p)
        inverse_mask = 1 - mask
        faded_spots = (blurred_frame.astype(np.float32) * inverse_mask[..., np.newaxis]).astype(np.uint8)
        return faded_spots
    return blurred_frame

def main():
    pygame.init()
    screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
    screen_info = pygame.display.Info()
    screen_w, screen_h = screen_info.current_w, screen_info.current_h

    cap = cv2.VideoCapture(1)
    if not cap.isOpened():
        print("Failed to open webcam.")
        pygame.quit()
        return
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

    # Get initial frame dimensions
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab initial frame.")
        cap.release()
        pygame.quit()
        return
    h, w = frame.shape[:2]

    # Generate spots with maximum parameters
    spot_positions = generate_spot_positions(h, w, num_spots=25, min_distance=100)
    spots = []
    for cx, cy in spot_positions:
        max_rx = np.random.randint(30, 70)  # Maximum x-radius
        max_ry = np.random.randint(40, 90)  # Maximum y-radius
        max_trans = np.random.uniform(0.85, 0.95)  # Maximum transparency
        spots.append({
            'center': (cx, cy),
            'max_radius_x': max_rx,
            'max_radius_y': max_ry,
            'max_transparency': max_trans
        })

    # Scrollbar variables
    scroll_pos = 0
    max_scroll = screen_w - THUMB_WIDTH
    dragging = False

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # Calculate progression (0 to 1)
        p = scroll_pos / max_scroll

        # Process frame
        processed = process_frame(frame, p, spots)

        # Convert to Pygame surface
        rgb = cv2.cvtColor(processed, cv2.COLOR_BGR2RGB)
        rgb = cv2.resize(rgb, (screen_w, screen_h))
        surf = pygame.surfarray.make_surface(np.rot90(rgb))

        # Draw scrollbar
        pygame.draw.rect(surf, SCROLLBAR_COLOR, (0, screen_h - SCROLLBAR_HEIGHT, screen_w, SCROLLBAR_HEIGHT))
        pygame.draw.rect(surf, THUMB_COLOR, (scroll_pos, screen_h - SCROLLBAR_HEIGHT, THUMB_WIDTH, SCROLLBAR_HEIGHT))

        # Update display
        screen.blit(surf, (0, 0))
        pygame.display.flip()

        # Handle events
        for event in pygame.event.get():
            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                cap.release()
                pygame.quit()
                return
            elif event.type == MOUSEBUTTONDOWN:
                if screen_h - SCROLLBAR_HEIGHT <= event.pos[1] <= screen_h:
                    dragging = True
            elif event.type == MOUSEBUTTONUP:
                dragging = False
            elif event.type == MOUSEMOTION and dragging:
                scroll_pos = max(0, min(event.pos[0] - THUMB_WIDTH // 2, max_scroll))

    cap.release()
    pygame.quit()

if __name__ == "__main__":
    main()
