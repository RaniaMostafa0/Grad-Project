import cv2
import numpy as np
import pygame
from pygame.locals import *

# Scrollbar parameters
SCROLLBAR_HEIGHT = 20
SCROLLBAR_COLOR = (100, 100, 100)
THUMB_COLOR = (200, 200, 200)
THUMB_WIDTH = 40

def precompute_blur_mask(shape, downscale_factor=0.5, x_offset=70, y_offset=40, radius_factor=4):
    """
    Precompute a Gaussian blur mask for the downscaled image.
    
    Args:
        shape: Tuple of (height, width) of the original image.
        downscale_factor: Factor to downscale the image for blur effect.
        x_offset, y_offset: Center offset for the blur mask.
        radius_factor: Controls the spread of the blur mask.
    
    Returns:
        blur_mask: 2D numpy array representing the blur mask.
        downscale_factor: The downscale factor used.
    """
    h, w = int(shape[0] * downscale_factor), int(shape[1] * downscale_factor)
    center_x, center_y = w // 2 + x_offset, h // 2 + y_offset
    y, x = np.ogrid[:h, :w]
    distance_from_center = np.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
    blur_mask = np.exp(-(distance_from_center ** 2) / (2 * (w // radius_factor) ** 2))
    return blur_mask.astype(np.float32), downscale_factor

def precompute_distortion_map(shape, x_offset=70, y_offset=40, sine_frequency=4, cosine_frequency=4, strength=1.0):
    """
    Precompute distortion maps for remapping the image.
    
    Args:
        shape: Tuple of (height, width) of the image.
        x_offset, y_offset: Center offset for distortion.
        sine_frequency, cosine_frequency: Frequencies for sine/cosine waves.
        strength: Strength of the distortion effect.
    
    Returns:
        map_x, map_y: 2D numpy arrays for x and y remapping coordinates.
    """
    h, w = shape[:2]
    center_x, center_y = w // 2 + x_offset, h // 2 + y_offset
    radius = min(h, w) // 2.5
    x, y = np.meshgrid(np.arange(w), np.arange(h))
    distance = np.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
    fade_factor = np.clip((radius - distance) / radius, 0, 1)
    amplitude_x = np.sin(2 * np.pi * (y - center_y) / h * sine_frequency) * 15 * strength
    amplitude_y = np.cos(2 * np.pi * (x - center_x) / w * cosine_frequency) * 15 * strength
    distortion_x = amplitude_x * fade_factor
    distortion_y = amplitude_y * fade_factor
    map_x = (x + distortion_x).astype(np.float32)
    map_y = (y + distortion_y).astype(np.float32)
    return map_x, map_y

def apply_progressive_effect(image, progression):
    """
    Apply progressive Macular Pucker effects (blur and distortion) to the image.
    
    Args:
        image: Input BGR image from OpenCV.
        progression: Value between 0 and 2 controlling effect intensity.
    
    Returns:
        Processed BGR image with effects applied.
    """
    h, w = image.shape[:2]
    
    # Interpolate effect parameters based on progression
    blur_strength = np.interp(progression, [0, 2], [1.0, 1.5])  # Blur intensity
    distortion_strength = np.interp(progression, [0, 2], [0.0, 1.5])  # Distortion strength
    radius_factor = np.interp(progression, [0, 2], [4, 3.5])  # Blur radius adjustment
    
    # Compute blur mask
    blur_mask, downscale_factor = precompute_blur_mask(image.shape, 0.5, 70, 40, radius_factor)
    
    # Apply distortion if progression > 0
    if progression > 0:
        map_x, map_y = precompute_distortion_map(image.shape, 70, 40, 4, 4, distortion_strength)
        distorted_image = cv2.remap(image, map_x, map_y, cv2.INTER_LINEAR, cv2.BORDER_REFLECT)
    else:
        distorted_image = image.copy()

    # Downscale and apply blur
    small_image = cv2.resize(distorted_image, None, fx=downscale_factor, fy=downscale_factor)
    small_blurred = cv2.GaussianBlur(small_image, (31, 31), blur_strength)
    
    # Blend using the mask
    mask_3d = cv2.merge([blur_mask] * 3)
    blended_small = cv2.convertScaleAbs(small_image * (1 - mask_3d) + small_blurred * mask_3d)
    
    # Upscale to original size
    return cv2.resize(blended_small, (w, h))

def main():
    # Initialize Pygame and set full-screen mode
    pygame.init()
    screen = pygame.display.set_mode((0, 0), FULLSCREEN)
    screen_info = pygame.display.Info()
    screen_w, screen_h = screen_info.current_w, screen_info.current_h
    pygame.display.set_caption("Macular Pucker Simulation")
    
    # Initialize webcam
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Error: Could not open webcam.")
        pygame.quit()
        return
    
    # Attempt to set webcam resolution to 1280x720
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
    
    # Scrollbar variables
    scroll_pos = 0
    max_scroll = screen_w - THUMB_WIDTH
    dragging = False
    
    # Main loop
    while True:
        # Capture frame
        ret, frame = cap.read()
        if not ret:
            print("Error: Failed to capture frame.")
            break
        
        # Flip frame horizontally to correct mirroring
        frame = cv2.flip(frame, 1)
        
        # Resize frame to full screen size
        frame_resized = cv2.resize(frame, (screen_w, screen_h))
        
        # Calculate progression from scrollbar position (0 to 2)
        progression = scroll_pos / max_scroll * 2
        
        # Apply Macular Pucker effects
        processed_frame = apply_progressive_effect(frame_resized, progression)
        
        # Convert to RGB for Pygame
        rgb = cv2.cvtColor(processed_frame, cv2.COLOR_BGR2RGB)
        
        # Create Pygame surface (rotate 90 degrees due to Pygame's coordinate system)
        surf = pygame.surfarray.make_surface(np.rot90(rgb))
        
        # Draw scrollbar on the surface
        pygame.draw.rect(surf, SCROLLBAR_COLOR, (0, screen_h - SCROLLBAR_HEIGHT, screen_w, SCROLLBAR_HEIGHT))
        pygame.draw.rect(surf, THUMB_COLOR, (scroll_pos, screen_h - SCROLLBAR_HEIGHT, THUMB_WIDTH, SCROLLBAR_HEIGHT))
        
        # Display the surface
        screen.blit(surf, (0, 0))
        pygame.display.flip()
        
        # Handle Pygame events
        for event in pygame.event.get():
            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                cap.release()
                pygame.quit()
                return
            elif event.type == MOUSEBUTTONDOWN:
                # Check if click is within scrollbar area
                if screen_h - SCROLLBAR_HEIGHT <= event.pos[1] <= screen_h:
                    dragging = True
            elif event.type == MOUSEBUTTONUP:
                dragging = False
            elif event.type == MOUSEMOTION and dragging:
                # Update scrollbar position
                scroll_pos = max(0, min(event.pos[0] - THUMB_WIDTH // 2, max_scroll))
    
    # Cleanup
    cap.release()
    pygame.quit()

if __name__ == "__main__":
    main()
