import cv2
import numpy as np

# Slider parameters
SCROLLBAR_HEIGHT = 20
SCROLLBAR_COLOR = (100, 100, 100)
THUMB_COLOR = (200, 200, 200)
THUMB_WIDTH = 40

# Precompute blur mask
def precompute_blur_mask(shape, downscale_factor=0.5, x_offset=20, y_offset=10, radius_factor=4):
    h, w = int(shape[0] * downscale_factor), int(shape[1] * downscale_factor)
    center_x, center_y = w // 2 + x_offset, h // 2 + y_offset
    y, x = np.ogrid[:h, :w]
    distance_from_center = np.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
    blur_mask = np.exp(-(distance_from_center ** 2) / (2 * (w // radius_factor) ** 2))
    return blur_mask.astype(np.float32), downscale_factor

# Precompute distortion map
def precompute_distortion_map(shape, x_offset=20, y_offset=10, sine_frequency=4, cosine_frequency=4, strength=1.0):
    h, w = shape[:2]
    center_x, center_y = w // 2 + x_offset, h // 2 + y_offset
    radius = min(h, w) // 2.5
    x, y = np.meshgrid(np.arange(w), np.arange(h))
    distance = np.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
    fade_factor = np.clip((radius - distance) / radius, 0, 1)
    amplitude_x = np.sin(2 * np.pi * (y - center_y) / h * sine_frequency) * 15 * strength
    amplitude_y = np.cos(2 * np.pi * (x - center_x) / w * cosine_frequency) * 15 * strength
    distortion_x = amplitude_x * fade_factor
    distortion_y = amplitude_y * fade_factor
    map_x = (x + distortion_x).astype(np.float32)
    map_y = (y + distortion_y).astype(np.float32)
    return map_x, map_y

# Apply effect based on progression level (0 to 2)
def apply_progressive_effect(image, blur_mask, downscale_factor, map_x, map_y, progression):
    h, w = image.shape[:2]
    
    # Interpolate parameters
    blur_strength = np.interp(progression, [0, 2], [1.0, 1.5])  # Increase blur intensity
    distortion_strength = np.interp(progression, [0, 2], [0.0, 1.5])  # Increase distortion
    radius_factor = np.interp(progression, [0, 2], [4, 3.5])  # Adjust blur radius
    
    # Recompute blur mask with varying radius
    blur_mask, _ = precompute_blur_mask(image.shape, downscale_factor, 70, 40, radius_factor)
    
    # Apply distortion if progression > 0
    if progression > 0:
        map_x, map_y = precompute_distortion_map(image.shape, 70, 40, 4, 4, distortion_strength)
        distorted_image = cv2.remap(image, map_x, map_y, cv2.INTER_LINEAR, cv2.BORDER_REFLECT)
    else:
        distorted_image = image.copy()

    # Downscale and blur
    small_image = cv2.resize(distorted_image, None, fx=downscale_factor, fy=downscale_factor)
    small_blurred = cv2.GaussianBlur(small_image, (31, 31), blur_strength)
    
    # Blend with mask
    mask_3d = cv2.merge([blur_mask] * 3)
    blended_small = cv2.convertScaleAbs(small_image * (1 - mask_3d) + small_blurred * mask_3d)
    
    # Upscale to original size
    return cv2.resize(blended_small, (w, h))

# Main function
def main():
    # Open webcam
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Failed to open webcam.")
        return
    
    # Get screen resolution
    screen_w = 1280  # Replace with your screen width
    screen_h = 720  # Replace with your screen height
    
    # Create a full-screen window
    cv2.namedWindow("Macular Pucker Simulation", cv2.WND_PROP_FULLSCREEN)
    cv2.setWindowProperty("Macular Pucker Simulation", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)
    
    # Initialize slider variables
    scroll_pos = 0
    max_scroll = screen_w - THUMB_WIDTH
    dragging = False
    
    # Precompute blur mask and distortion maps
    ret, sample_frame = cap.read()
    if not ret:
        print("Failed to capture frame for initialization.")
        cap.release()
        return
    
    # Flip the frame horizontally to correct mirroring
    sample_frame = cv2.flip(sample_frame, 1)
    
    # Resize frame to maintain aspect ratio for initial processing
    target_height = 720
    target_width = int(sample_frame.shape[1] * (target_height / sample_frame.shape[0]))
    frame_resized = cv2.resize(sample_frame, (target_width, target_height))
    
    blur_mask, downscale_factor = precompute_blur_mask((target_height, target_width), 0.5, 70, 40)
    map_x, map_y = precompute_distortion_map((target_height, target_width), 70, 40, 4, 4, 1.0)
    
    try:
        while True:
            ret, frame = cap.read()
            if not ret:
                print("Failed to capture frame.")
                break
            
            # Flip the frame horizontally to correct mirroring
            frame = cv2.flip(frame, 1)
            
            # Resize frame to maintain aspect ratio for processing
            frame_resized = cv2.resize(frame, (target_width, target_height))
            
            # Calculate progression level based on slider position
            progression = scroll_pos / max_scroll * 2  # Scale to [0, 2]
            
            # Apply progressive effect
            processed_frame = apply_progressive_effect(frame_resized, blur_mask, downscale_factor, map_x, map_y, progression)
            
            # Target display dimensions (full screen minus scrollbar height)
            display_height = screen_h - SCROLLBAR_HEIGHT
            display_width = screen_w
            
            # Calculate aspect ratios
            frame_aspect = processed_frame.shape[1] / processed_frame.shape[0]  # Width / Height of the frame
            display_aspect = display_width / display_height  # Width / Height of the display area
            
            # Resize the frame to match one dimension and crop the other
            if frame_aspect > display_aspect:
                # Frame is wider than the display: match height, crop width
                intermediate_height = display_height
                intermediate_width = int(display_height * frame_aspect)
                intermediate_frame = cv2.resize(processed_frame, (intermediate_width, intermediate_height))
                
                # Crop the excess width (center the frame)
                excess_width = intermediate_width - display_width
                start_x = excess_width // 2
                processed_frame_resized = intermediate_frame[:, start_x:start_x + display_width]
            else:
                # Frame is taller than the display: match width, crop height
                intermediate_width = display_width
                intermediate_height = int(display_width / frame_aspect)
                intermediate_frame = cv2.resize(processed_frame, (intermediate_width, intermediate_height))
                
                # Crop the excess height (center the frame)
                excess_height = intermediate_height - display_height
                start_y = excess_height // 2
                processed_frame_resized = intermediate_frame[start_y:start_y + display_height, :]
            
            # Create a blank image for the full screen
            combined_frame = np.zeros((screen_h, screen_w, 3), dtype=np.uint8)
            
            # Place the processed frame directly into the combined frame
            combined_frame[:display_height, :display_width] = processed_frame_resized
            
            # Create a scrollbar at the bottom
            scrollbar = np.zeros((SCROLLBAR_HEIGHT, screen_w, 3), dtype=np.uint8)
            cv2.rectangle(scrollbar, (0, 0), (screen_w, SCROLLBAR_HEIGHT), SCROLLBAR_COLOR, -1)
            cv2.rectangle(scrollbar, (scroll_pos, 0), (scroll_pos + THUMB_WIDTH, SCROLLBAR_HEIGHT), THUMB_COLOR, -1)
            
            # Add the scrollbar to the combined frame
            combined_frame[screen_h - SCROLLBAR_HEIGHT:, :] = scrollbar
            
            # Display the combined frame
            cv2.imshow("Macular Pucker Simulation", combined_frame)
            
            # Handle mouse events for the slider
            def mouse_callback(event, x, y, flags, param):
                nonlocal scroll_pos, dragging
                if event == cv2.EVENT_LBUTTONDOWN:
                    if screen_h - SCROLLBAR_HEIGHT <= y <= screen_h:
                        dragging = True
                elif event == cv2.EVENT_LBUTTONUP:
                    dragging = False
                elif event == cv2.EVENT_MOUSEMOVE and dragging:
                    scroll_pos = max(0, min(x - THUMB_WIDTH // 2, max_scroll))
            
            cv2.setMouseCallback("Macular Pucker Simulation", mouse_callback)
            
            # Exit on 'ESC' key press
            if cv2.waitKey(1) == 27:  # 27 is the key code for ESC
                break
    except KeyboardInterrupt:
        print("Exiting simulation.")
    finally:
        cap.release()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
