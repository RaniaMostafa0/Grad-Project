import cv2
import numpy as np
import pygame
from pygame.locals import *
import random

# Scrollbar parameters
SCROLLBAR_HEIGHT = 20
SCROLLBAR_COLOR = (100, 100, 100)
THUMB_COLOR = (200, 200, 200)
THUMB_WIDTH = 40

# Spot class to hold parameters for black spots
class Spot:
    def __init__(self, center_x, center_y):
        self.center_x = center_x
        self.center_y = center_y
        # Randomize spot size and transparency
        self.max_radius_x = random.randint(30, 70)
        self.max_radius_y = random.randint(40, 90)
        self.max_transparency = random.uniform(0.85, 0.95)

# Generate non-overlapping spot positions
def generate_spot_positions(h, w, num_spots=25, min_distance=100):
    positions = []
    for _ in range(num_spots):
        attempts = 0
        while attempts < 100:
            center_x = random.randint(0, w - 1)
            center_y = random.randint(0, h - 1)
            overlap = any(
                np.sqrt((center_x - px)**2 + (center_y - py)**2) < min_distance
                for px, py in positions
            )
            if not overlap:
                positions.append((center_x, center_y))
                break
            attempts += 1
        if attempts >= 100:
            print("Warning: Could not place a spot after 100 attempts.")
    return positions

# Apply contrast reduction
def apply_contrast_reduction(image, factor):
    if factor == 1:
        return image
    lab = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)
    l = cv2.addWeighted(l, factor, np.full_like(l, 128, dtype=np.uint8), 1 - factor, 0)
    reduced_lab = cv2.merge((l, a, b))
    return cv2.cvtColor(reduced_lab, cv2.COLOR_LAB2BGR)

# Apply Gaussian blur
def apply_blur(image, kernel_size):
    if kernel_size[0] <= 1 or kernel_size[1] <= 1:
        return image
    return cv2.GaussianBlur(image, kernel_size, 0)

# Create black spots mask (precompute once)
def create_black_spots_mask(h, w, spots):
    mask = np.zeros((h, w), dtype=np.float32)
    for spot in spots:
        y, x = np.ogrid[:h, :w]
        distance = np.sqrt(((x - spot.center_x) / spot.max_radius_x) ** 2 + ((y - spot.center_y) / spot.max_radius_y) ** 2)
        mask[distance < 1] = np.maximum(mask[distance < 1], spot.max_transparency)
        transition = (distance >= 1) & (distance < 2)
        mask[transition] = np.maximum(mask[transition], spot.max_transparency * (1 - ((distance[transition] - 1) / 1)))
    
    # Apply Gaussian blur to the mask (only once)
    mask = cv2.GaussianBlur(mask, (51, 51), 0)
    return mask

# Process each frame based on scrollbar position
def process_frame(frame, p, black_spots_mask):
    # Remove the horizontal flip to avoid reversing the scene
    # flipped_frame = cv2.flip(frame, 1)  # Remove this line
    
    # Smooth contrast reduction interpolation
    contrast_factor = 1.0 - 0.5 * p  # Linearly interpolate from 1.0 to 0.5
    contrast_reduced = apply_contrast_reduction(frame, contrast_factor)  # Use frame instead of flipped_frame
    
    # Instant blur interpolation
    blur_kernel_size = int(1 + 20 * p)  # Linearly interpolate from 1 to 21
    blur_kernel_size = blur_kernel_size if blur_kernel_size % 2 == 1 else blur_kernel_size + 1  # Ensure odd size
    blurred_frame = apply_blur(contrast_reduced, (blur_kernel_size, blur_kernel_size))
    
    # Overlay black spots on the blurred frame (only if p >= 0.75)
    if p >= 0.75:
        t = (p - 0.75) / 0.25  # Normalize p to [0, 1] for spots
        mask = black_spots_mask * t  # Scale mask intensity based on p
        mask = mask[..., np.newaxis]  # Add channel dimension
        black_spots = (blurred_frame.astype(np.float32) * (1 - mask)).astype(np.uint8)
        return black_spots
    
    return blurred_frame

# Main function
def main():
    # Initialize Pygame
    pygame.init()
    screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
    screen_info = pygame.display.Info()
    screen_w, screen_h = screen_info.current_w, screen_info.current_h

    # Initialize webcam
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Failed to open webcam.")
        pygame.quit()
        return
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

    # Get initial frame dimensions
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab initial frame.")
        cap.release()
        pygame.quit()
        return
    h, w = frame.shape[:2]

    # Generate spots and precompute black spots mask
    spot_positions = generate_spot_positions(h, w)
    spots = [Spot(cx, cy) for cx, cy in spot_positions]
    black_spots_mask = create_black_spots_mask(h, w, spots)

    # Scrollbar variables
    scroll_pos = 0
    max_scroll = screen_w - THUMB_WIDTH
    dragging = False

    # Main loop
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # Calculate progression
        p = scroll_pos / max_scroll

        # Process frame
        processed = process_frame(frame, p, black_spots_mask)

        # Convert to Pygame surface
        rgb = cv2.cvtColor(processed, cv2.COLOR_BGR2RGB)
        rgb = cv2.resize(rgb, (screen_w, screen_h))
        surf = pygame.surfarray.make_surface(np.rot90(rgb))

        # Draw scrollbar
        pygame.draw.rect(surf, SCROLLBAR_COLOR, (0, screen_h - SCROLLBAR_HEIGHT, screen_w, SCROLLBAR_HEIGHT))
        pygame.draw.rect(surf, THUMB_COLOR, (scroll_pos, screen_h - SCROLLBAR_HEIGHT, THUMB_WIDTH, SCROLLBAR_HEIGHT))

        # Update display
        screen.blit(surf, (0, 0))
        pygame.display.flip()

        # Handle events
        for event in pygame.event.get():
            if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
                cap.release()
                pygame.quit()
                return
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if screen_h - SCROLLBAR_HEIGHT <= event.pos[1] <= screen_h:
                    dragging = True
            elif event.type == pygame.MOUSEBUTTONUP:
                dragging = False
            elif event.type == pygame.MOUSEMOTION and dragging:
                scroll_pos = max(0, min(event.pos[0] - THUMB_WIDTH // 2, max_scroll))

    # Cleanup
    cap.release()
    pygame.quit()

if __name__ == "__main__":
    main()
