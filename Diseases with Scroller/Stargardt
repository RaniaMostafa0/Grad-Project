import cv2
import numpy as np
import time
import pygame
from pygame.locals import *

# Enable GPU acceleration if available
cv2.setUseOptimized(True)
cv2.ocl.setUseOpenCL(True)

# Scrollbar parameters
SCROLLBAR_HEIGHT = 20
SCROLLBAR_COLOR = (100, 100, 100)
THUMB_COLOR = (200, 200, 200)
THUMB_WIDTH = 40

# Stargardt Simulation Functions
def apply_glare(image, mask, glare_intensity=150.0):
    return cv2.addWeighted(image, 1, mask, glare_intensity / 255.0, 0)

def separable_gaussian_blur(image, kernel_size, sigma):
    gaussian_1d = cv2.getGaussianKernel(kernel_size, sigma)
    return cv2.sepFilter2D(image, -1, gaussian_1d, gaussian_1d.T)

def create_stargardt_mask(shape, progression, time_factor):
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    y, x = np.meshgrid(np.arange(rows), np.arange(cols), indexing="ij")
    distance = np.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
    
    # Combine slider progression and time factor (0 to 1)
    total_progression = min(progression + time_factor, 1.0)  # Cap at 1.0
    
    # Scale radii with total progression
    inner_radius = 330 * total_progression
    outer_radius = 360 * total_progression
    
    mask = np.zeros_like(distance, dtype=np.float32)
    mask[distance <= inner_radius] = 1
    fading_region = (distance > inner_radius) & (distance <= outer_radius)
    mask[fading_region] = 1 - (distance[fading_region] - inner_radius) / (outer_radius - inner_radius)
    
    # Add random extensions (scaled with total progression)
    num_extensions = int(120 * total_progression)
    max_extension_length = 45 * total_progression
    for _ in range(num_extensions):
        angle = np.random.uniform(0, 2 * np.pi)
        extension_length = np.random.uniform(inner_radius, inner_radius + max_extension_length)
        extension_x = int(center_x + extension_length * np.cos(angle))
        extension_y = int(center_y + extension_length * np.sin(angle))
        cv2.circle(mask, (extension_x, extension_y), radius=int(10 * total_progression), color=1, thickness=-1)
    
    # Adjust smoothing based on total progression
    smoothed_mask = separable_gaussian_blur(mask, kernel_size=61, sigma=30)
    block_size = 10
    pixelated_mask = cv2.resize(smoothed_mask, (cols // block_size, rows // block_size), 
                              interpolation=cv2.INTER_AREA)
    pixelated_mask = cv2.resize(pixelated_mask, (cols, rows), interpolation=cv2.INTER_NEAREST)
    final_mask = separable_gaussian_blur(pixelated_mask, kernel_size=51, sigma=20)
    
    return final_mask

def process_frame(frame, stargardt_mask, progression, time_factor):
    gray_image = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    _, bright_areas = cv2.threshold(gray_image, 200, 255, cv2.THRESH_BINARY)
    bright_mask = cv2.merge([bright_areas, bright_areas, bright_areas])
    
    # Combine progression and time factor for glare
    total_progression = min(progression + time_factor, 1.0)
    glare_image = apply_glare(frame, bright_mask, glare_intensity=150.0 * total_progression)
    final_image_with_glare = cv2.addWeighted(frame, 1, glare_image, 0.4 * total_progression, 0)
    
    # Apply Stargardt mask
    faded_spot = (final_image_with_glare * (1 - stargardt_mask[..., np.newaxis])).astype(np.uint8)
    return faded_spot

def main():
    pygame.init()
    screen = pygame.display.set_mode((0, 0), FULLSCREEN)
    screen_info = pygame.display.Info()
    screen_w, screen_h = screen_info.current_w, screen_info.current_h

    cap = cv2.VideoCapture(0)  # Use 0 for default webcam
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

    if not cap.isOpened():
        print("Failed to open webcam.")
        pygame.quit()
        return

    scroll_pos = 0
    max_scroll = screen_w - THUMB_WIDTH
    dragging = False

    # Get initial frame for mask shape
    ret, sample_frame = cap.read()
    if not ret:
        print("Failed to capture initial frame.")
        cap.release()
        pygame.quit()
        return

    # Time-based progression
    start_time = time.time()
    max_time = 60  # Time in seconds to reach maximum size (adjust as needed)

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # Calculate slider progression (0 to 1)
        slider_progression = scroll_pos / max_scroll
        
        # Calculate time-based progression (0 to 1)
        elapsed_time = time.time() - start_time
        time_factor = min(elapsed_time / max_time, 1.0)  # Linear increase up to 1.0
        
        # Generate mask and process frame
        if slider_progression <= 0.0 and time_factor <= 0.0:
            processed = frame  # No effect at start
        else:
            stargardt_mask = create_stargardt_mask(sample_frame.shape[:2], slider_progression, time_factor)
            processed = process_frame(frame, stargardt_mask, slider_progression, time_factor)

        # Convert to Pygame surface
        rgb = cv2.cvtColor(processed, cv2.COLOR_BGR2RGB)
        rgb = cv2.resize(rgb, (screen_w, screen_h))
        surf = pygame.surfarray.make_surface(np.rot90(rgb))

        # Draw scrollbar
        pygame.draw.rect(surf, SCROLLBAR_COLOR, (0, screen_h - SCROLLBAR_HEIGHT, screen_w, SCROLLBAR_HEIGHT))
        pygame.draw.rect(surf, THUMB_COLOR, (scroll_pos, screen_h - SCROLLBAR_HEIGHT, THUMB_WIDTH, SCROLLBAR_HEIGHT))

        # Update display
        screen.blit(surf, (0, 0))
        pygame.display.flip()

        # Handle events
        for event in pygame.event.get():
            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                cap.release()
                pygame.quit()
                return
            elif event.type == MOUSEBUTTONDOWN:
                if screen_h - SCROLLBAR_HEIGHT <= event.pos[1] <= screen_h:
                    dragging = True
            elif event.type == MOUSEBUTTONUP:
                dragging = False
            elif event.type == MOUSEMOTION and dragging:
                scroll_pos = max(0, min(event.pos[0] - THUMB_WIDTH // 2, max_scroll))

        # Maintain reasonable frame rate
        time.sleep(1/25)

    cap.release()
    pygame.quit()

if __name__ == "__main__":
    main()
