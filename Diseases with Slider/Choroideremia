import cv2
import numpy as np
import pygame
from pygame.locals import *

# Enable GPU acceleration in OpenCV
cv2.setUseOptimized(True)
cv2.ocl.setUseOpenCL(True)

# Scrollbar parameters
SCROLLBAR_HEIGHT = 20
SCROLLBAR_COLOR = (100, 100, 100)
THUMB_COLOR = (200, 200, 200)
THUMB_WIDTH = 40

# ================== Night Blindness Functions ==================

def separable_gaussian_blur(image, kernel_size, sigma):
    """
    Apply Gaussian blur more efficiently using separable filters.
    """
    return cv2.GaussianBlur(image, (kernel_size, kernel_size), sigma)

def simulate_night_blindness(image, adjustment_level, progression):
    """
    Simulate night blindness by darkening and blurring the image based on disease progression.
    
    Parameters:
    - image: Input image in BGR format.
    - adjustment_level: Float between 0 and 1 indicating the darkening level.
    - progression: Float between 0 and 1 indicating the disease progression for blur strength.
    
    Returns:
    - Blurred and darkened image in uint8 format.
    """
    # Darken the image based on the adjustment level
    darkened_image = image * adjustment_level
    darkened_image = np.clip(darkened_image, 0, 255)
    
    # Calculate sigma for blur based on progression
    max_sigma = 10
    sigma = progression * max_sigma
    
    if sigma > 0:
        # Calculate kernel size based on sigma, ensuring it's odd and at least 3
        kernel_size = 2 * int(3 * sigma) + 1
        kernel_size = max(3, kernel_size)
        # Apply Gaussian blur
        blurred_image = separable_gaussian_blur(darkened_image, kernel_size, sigma)
    else:
        # No blur when progression is 0
        blurred_image = darkened_image
    
    return blurred_image.astype(np.uint8)

def detect_light_condition(frame):
    """
    Detect the average brightness of the frame to simulate light condition (bright or dark).
    
    Parameters:
    - frame: Input image in BGR format.
    
    Returns:
    - Float representing the average brightness.
    """
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    avg_brightness = np.mean(gray)
    
    return avg_brightness

# ================== Tunnel Vision Functions ==================

def create_dynamic_irregular_mask(shape, radius_scale, noise_strength, edge_fade_size, seed=42):
    """Create a dynamic irregular mask for tunnel vision."""
    np.random.seed(seed)
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    base_radius = int(min(center_x, center_y) * radius_scale)

    y, x = np.ogrid[:rows, :cols]
    angle = np.arctan2(y - center_y, x - center_x)
    distance_from_center = np.sqrt((x - center_x)**2 + (y - center_y)**2)

    random_radii = base_radius * (1 + noise_strength * (np.random.rand(360) - 0.5))
    radius_map = np.interp((np.degrees(angle) + 360) % 360, np.arange(360), random_radii)

    irregular_mask = (distance_from_center < radius_map).astype(np.float32)
    irregular_mask = cv2.GaussianBlur(irregular_mask, (edge_fade_size, edge_fade_size), 0)

    return irregular_mask

def apply_dynamic_tunnel_vision(image_rgb, static_mask, intensity):
    """Apply a dynamic irregular mask to the image with adjustable intensity."""
    vision_image = image_rgb.astype(np.float32)
    vision_image *= static_mask[:, :, np.newaxis] * intensity
    vision_image = np.clip(vision_image, 0, 255)
    return vision_image.astype(np.uint8)

# ================== Black Spots Functions ==================

def generate_fixed_spot_positions(num_spots, target_width, target_height, central=True):
    """Generate fixed positions for spots, ensuring no overlap."""
    positions = []
    for _ in range(num_spots):
        while True:
            if central:
                # Concentrate spots in the central region
                center_x = np.random.normal(target_width // 2, target_width // 8)
                center_y = np.random.normal(target_height // 2, target_height // 8)
                center_x = int(np.clip(center_x, target_width // 4, 3 * target_width // 4))
                center_y = int(np.clip(center_y, target_height // 4, 3 * target_height // 4))
            else:
                center_x = np.random.randint(0, target_width)
                center_y = np.random.randint(0, target_height)
            base_radius_x = np.random.randint(10, 40)
            base_radius_y = np.random.randint(20, 50)
            transparency = np.random.uniform(0.6, 0.8)  # Max opacity for the spot
            overlap = any(abs(center_x - px) < (base_radius_x + rx) and 
                          abs(center_y - py) < (base_radius_y + ry)
                          for px, py, rx, ry, _ in positions)
            if not overlap:
                positions.append((center_x, center_y, base_radius_x, base_radius_y, transparency))
                break
    return positions

def create_spot_mask(spot_data, p, target_height, target_width, delta_p=0.01, delta_p_growth=0.05):
    """Create a mask for spots with gradual appearance and growth based on p."""
    mask = np.zeros((target_height, target_width), dtype=np.float32)
    for (cx, cy, base_rx, base_ry, transparency, p_act) in spot_data:
        # Calculate transparency factor
        transparency_factor = min(1, max(0, (p - p_act) / delta_p))
        if transparency_factor <= 0:
            continue  # Spot not visible yet
        
        # Calculate size factor (grows over delta_p_growth)
        size_factor = min(1, max(0, (p - p_act) / delta_p_growth))
        current_rx = base_rx * size_factor
        current_ry = base_ry * size_factor
        if current_rx < 1 or current_ry < 1:
            continue  # Too small to render
        
        effective_transparency = transparency * transparency_factor
        
        # Define bounding box for the spot (distance < 2)
        x_min = max(0, int(cx - 2 * current_rx))
        x_max = min(target_width, int(cx + 2 * current_rx))
        y_min = max(0, int(cy - 2 * current_ry))
        y_max = min(target_height, int(cy + 2 * current_ry))
        
        # Create grid for the bounding box
        y, x = np.ogrid[y_min:y_max, x_min:x_max]
        distance = np.sqrt(((x - cx) / current_rx) ** 2 + ((y - cy) / current_ry) ** 2)
        
        # Compute mask for the spot within the bounding box
        spot_mask = np.zeros((y_max - y_min, x_max - x_min), dtype=np.float32)
        spot_mask[distance < 1] = effective_transparency
        transition = (distance >= 1) & (distance < 2)
        spot_mask[transition] = effective_transparency * (1 - (distance[transition] - 1))
        
        # Add to the full mask using maximum
        mask[y_min:y_max, x_min:x_max] = np.maximum(mask[y_min:y_max, x_min:x_max], spot_mask)
    
    # Apply Gaussian blur for smoother edges
    return cv2.GaussianBlur(mask, (101, 101), 20)

def apply_black_spots(image, spot_mask):
    """Apply black spots to the image using the spot mask."""
    spot_mask_3d = cv2.merge([spot_mask] * 3)
    result = image * (1 - spot_mask_3d)
    return result.astype(np.uint8)

# ================== Main Function ==================

def main():
    pygame.init()
    screen = pygame.display.set_mode((0, 0), FULLSCREEN)
    screen_info = pygame.display.Info()
    screen_w, screen_h = screen_info.current_w, screen_info.current_h

    cap = cv2.VideoCapture(0)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

    scroll_pos = 0
    max_scroll = screen_w - THUMB_WIDTH
    dragging = False

    # Initialize black spots data
    target_height, target_width = 720, 1280
    max_small_spots = 18
    small_spot_positions = generate_fixed_spot_positions(max_small_spots, target_width, target_height, central=True)
    small_spot_p_activation = [0.25 + (i / max_small_spots) * 0.25 for i in range(max_small_spots)]
    small_spot_data = [pos + (p_act,) for pos, p_act in zip(small_spot_positions, small_spot_p_activation)]

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        progression = scroll_pos / max_scroll

        # ================== No Symptoms at Start ==================
        if progression <= 0.0:
            processed = frame  # No effects applied
        else:
            # ================== Detect Light Condition ==================
            avg_brightness = detect_light_condition(frame)

            # ================== Apply Night Blindness Only in Dark Conditions ==================
            if avg_brightness < 100:  # Dark condition (threshold can be adjusted)
                print("In darkness, simulating night blindness.")
                # Adjust the adjustment level based on the slider's position
                adjustment_level = 1.0 - progression  # Darkening level increases as progression increases
                adjustment_level = max(0.2, adjustment_level)  # Ensure it doesn't go below 0.2
                processed = simulate_night_blindness(frame, adjustment_level, progression)
            else:
                print("In light, normal vision.")
                processed = frame  # No night blindness effect in bright conditions

            # ================== Apply Tunnel Vision ==================
            tunnel_radius_scale = 1.8 - (progression ** 0.6) * 1.7  
            tunnel_mask = create_dynamic_irregular_mask(
                (720, 1280), radius_scale=tunnel_radius_scale, noise_strength=0.7, edge_fade_size=199
            )
            processed = apply_dynamic_tunnel_vision(processed, tunnel_mask, 1.0)

            # ================== Apply Black Spots ==================
            if progression >= 0.2:
                spot_mask = create_spot_mask(small_spot_data, progression, target_height, target_width)
                processed = apply_black_spots(processed, spot_mask)

        # ================== Convert to Pygame Surface ==================
        rgb = cv2.cvtColor(processed, cv2.COLOR_BGR2RGB)
        rgb = cv2.resize(rgb, (screen_w, screen_h))
        surf = pygame.surfarray.make_surface(np.rot90(rgb))

        # Draw scrollbar
        pygame.draw.rect(surf, SCROLLBAR_COLOR, (0, screen_h - SCROLLBAR_HEIGHT, screen_w, SCROLLBAR_HEIGHT))
        pygame.draw.rect(surf, THUMB_COLOR, (scroll_pos, screen_h - SCROLLBAR_HEIGHT, THUMB_WIDTH, SCROLLBAR_HEIGHT))

        # Update display
        screen.blit(surf, (0, 0))
        pygame.display.flip()

        # Handle events
        for event in pygame.event.get():
            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                cap.release()
                pygame.quit()
                return
            elif event.type == MOUSEBUTTONDOWN:
                if screen_h - SCROLLBAR_HEIGHT <= event.pos[1] <= screen_h:
                    dragging = True
            elif event.type == MOUSEBUTTONUP:
                dragging = False
            elif event.type == MOUSEMOTION and dragging:
                scroll_pos = max(0, min(event.pos[0] - THUMB_WIDTH // 2, max_scroll))

    cap.release()
    pygame.quit()

if __name__ == "__main__":
    main()
