import cv2
import numpy as np
import time

def process_frame(frame):
    """
    Process a single frame to simulate nuclear cataract symptoms.
    """
    # 1. Gaussian Blur (efficient kernel size for performance)
    kernel_size = 15
    blurred_frame = cv2.GaussianBlur(frame, (kernel_size, 1), 5)  # Horizontal pass
    blurred_frame = cv2.GaussianBlur(blurred_frame, (1, kernel_size), 5)  # Vertical pass

    # 2. Yellow Tint
    yellow_tint = np.array([1.0, 1.0, 0.7], dtype=np.float32)
    yellow_frame = blurred_frame * yellow_tint
    yellow_frame = np.clip(yellow_frame, 0, 255).astype(np.uint8)

    # 3. Reduce Contrast
    contrast_reduced_frame = cv2.convertScaleAbs(yellow_frame, alpha=0.65, beta=30)

    return contrast_reduced_frame

def simulate_cataract_video_with_fps(input_video_path, output_video_path):
    # Capture video
    cap = cv2.VideoCapture(input_video_path)
    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = int(cap.get(cv2.CAP_PROP_FPS))

    # Define video writer
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_video_path, fourcc, fps, (frame_width, frame_height))

    # Track FPS
    frame_count = 0
    total_time = 0

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Start timing
        start_time = time.time()
        
        # Process frame
        processed_frame = process_frame(frame)
        
        # Stop timing
        end_time = time.time()

        # Calculate frame processing time
        processing_time = end_time - start_time
        total_time += processing_time
        frame_count += 1

        # Write the processed frame
        out.write(processed_frame)

        print(f"Frame {frame_count}: Processing time = {processing_time:.4f} seconds")

    # Release resources
    cap.release()
    out.release()

    # Calculate overall FPS and average processing time per frame
    average_fps = frame_count / total_time if total_time > 0 else 0
    average_processing_time_per_frame = total_time / frame_count if frame_count > 0 else 0

    print(f"Processed {frame_count} frames in {total_time:.2f} seconds")
    print(f"Average processing time per frame: {average_processing_time_per_frame:.4f} seconds")
    print(f"Average FPS: {average_fps:.2f}")

# Example usage
simulate_cataract_video_with_fps(r"C:\Users\pc\Downloads\WhatsApp Video 2024-11-30 at 23.04.32_ebe3b33d.mp4", r"C:\Users\pc\Downloads\images\output5.mp4")
