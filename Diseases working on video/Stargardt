import cv2
import numpy as np
import time

def apply_glare(image, mask, glare_intensity=150.0):
    """
    Apply glare effect by blending the original image with the mask.
    """
    return cv2.addWeighted(image, 1, mask, glare_intensity / 255.0, 0)

def separable_gaussian_blur(image, kernel_size, sigma):
    """
    Applies separable Gaussian blur to the input image.
    """
    gaussian_1d = cv2.getGaussianKernel(kernel_size, sigma)
    horizontal_blur = cv2.filter2D(image, -1, gaussian_1d)
    vertical_blur = cv2.filter2D(horizontal_blur, -1, gaussian_1d.T)
    return vertical_blur

def process_frame(frame):
    """
    Applies glare and stargardt simulation on a single frame.
    """
    original_image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    
    # Step 1: Simulate Glare Effect
    gray_image = cv2.cvtColor(original_image_rgb, cv2.COLOR_RGB2GRAY)
    _, bright_areas = cv2.threshold(gray_image, 200, 255, cv2.THRESH_BINARY)
    bright_mask = cv2.merge([bright_areas, bright_areas, bright_areas])
    glare_image = apply_glare(original_image_rgb, bright_mask)
    final_image_with_glare = cv2.addWeighted(original_image_rgb, 1, glare_image, 0.4, 0)

    # Step 2: Simulate stargardt with Irregular Spot
    rows, cols = original_image_rgb.shape[:2]
    center_x, center_y = cols // 2, rows // 2

    y, x = np.meshgrid(np.arange(rows), np.arange(cols), indexing="ij")
    noise = 1 + 0.5 * np.random.uniform(-1, 1, (rows, cols))

    base_radius_x, base_radius_y = 120, 100
    max_radius_x, max_radius_y = 170, 140

    adjusted_radius_x = base_radius_x * noise
    adjusted_radius_y = base_radius_y * noise

    distance = ((x - center_x) ** 2 / adjusted_radius_x**2) + ((y - center_y) ** 2 / adjusted_radius_y**2)
    mask = np.clip(1 - ((distance - 1) / (max_radius_x / base_radius_x - 1)), 0, 1)
    mask = np.where(distance < 1, 1, mask)

    mask = separable_gaussian_blur(mask.astype(np.float32), kernel_size=51, sigma=15)
    faded_spot = (final_image_with_glare * (1 - mask[..., np.newaxis])).astype(np.uint8)

    return cv2.cvtColor(faded_spot, cv2.COLOR_RGB2BGR)

def process_video(input_video_path, output_video_path):
    """
    Processes a video frame by frame, applies glare and stargardt simulation, and saves the output.
    """
    cap = cv2.VideoCapture(input_video_path)
    if not cap.isOpened():
        print(f"Failed to open video file: {input_video_path}")
        return

    # Video properties
    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = cap.get(cv2.CAP_PROP_FPS)
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

    # Video writer
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_video_path, fourcc, fps, (frame_width, frame_height))

    frame_count = 0
    total_processing_time = 0

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Process frame
        start_time = time.time()
        processed_frame = process_frame(frame)
        total_processing_time += (time.time() - start_time)

        # Write processed frame to output video
        out.write(processed_frame)

        frame_count += 1
        print(f"Processed frame {frame_count}/{total_frames}", end="\r")

    # Release resources
    cap.release()
    out.release()

    # Calculate metrics
    average_processing_time = total_processing_time / frame_count
    overall_fps = frame_count / total_processing_time

    print(f"\nProcessing complete.")
    print(f"Total frames processed: {frame_count}")
    print(f"Average processing time per frame: {average_processing_time:.4f} seconds")
    print(f"Overall FPS: {overall_fps:.2f}")

# Test the function
input_video_path = r"C:\Users\pc\Downloads\WhatsApp Video 2024-11-30 at 23.04.32_ebe3b33d.mp4"
output_video_path = r"C:\Users\pc\Downloads\stargardt_video.mp4"
process_video(input_video_path, output_video_path)
