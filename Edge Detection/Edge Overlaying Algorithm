import cv2
import numpy as np

# Specify the input and output video file paths
input_path = r"C:\Users\pc\Downloads\WhatsApp Video 2024-11-30 at 23.04.32_ebe3b33d.mp4"  # Replace with your input video file path
output_path = r"C:\Users\pc\Downloads\Edge Overlaying.mp4"  # Output will be saved here

# Open the input video
cap = cv2.VideoCapture(input_path)
if not cap.isOpened():
    raise FileNotFoundError(f"Could not open video file at {input_path}. Please check the file path.")

# Get video properties
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = cap.get(cv2.CAP_PROP_FPS)
total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

# Define the codec and create VideoWriter object
fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # Codec for MP4
out = cv2.VideoWriter(output_path, fourcc, fps, (frame_width, frame_height))

# Process each frame
frame_count = 0
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Apply bilateral filtering for edge-preserving smoothing
    filtered = cv2.bilateralFilter(frame, d=9, sigmaColor=75, sigmaSpace=75)

    # Convert the filtered frame to grayscale
    gray = cv2.cvtColor(filtered, cv2.COLOR_BGR2GRAY)

    # Apply Canny edge detection
    edges = cv2.Canny(gray, 50, 150)

    # Create the output frame by copying the original frame
    output_frame = frame.copy()

    # Overlay edges in red (BGR format: [0, 0, 255] is red in OpenCV)
    output_frame[edges == 255] = [0, 0, 255]

    # Write the processed frame to the output video
    out.write(output_frame)

    # Print progress
    frame_count += 1
    if frame_count % 10 == 0:  # Update every 10 frames
        print(f"Processed {frame_count}/{total_frames} frames")

# Release resources
cap.release()
out.release()
cv2.destroyAllWindows()

print(f"Edge-overlaid video saved to {output_path}")
