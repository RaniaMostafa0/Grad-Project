import cv2
import numpy as np
import time
import pygame
from pygame.locals import *

def separable_gaussian_blur(image, kernel_size, sigma):
    k = cv2.getGaussianKernel(kernel_size, sigma)
    blurred = cv2.filter2D(image, -1, k)  # X direction
    blurred = cv2.filter2D(blurred, -1, k.T)  # Y direction
    return blurred

def simulate_night_blindness(image, adjustment_level):
    """Simulate night blindness by darkening and blurring the image."""
    darkened_image = image * adjustment_level
    darkened_image = np.clip(darkened_image, 0, 255)
    blurred_image = separable_gaussian_blur(darkened_image, 31, 10)
    return blurred_image.astype(np.uint8)

def detect_light_condition(frame):
    """Detect the average brightness of the frame."""
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    return np.mean(gray)

def simulate_light_and_dark_conditions():
    # Initialize Pygame
    pygame.init()
    screen = pygame.display.set_mode((0, 0), FULLSCREEN)
    pygame.display.set_caption('Night Vision Simulation')
    screen_w = pygame.display.Info().current_w
    screen_h = pygame.display.Info().current_h

    # Open webcam
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Failed to open webcam.")
        return

    # Get original resolution
    original_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    original_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

    # Set target processing resolution
    target_height = 720
    target_width = int((original_width / original_height) * target_height)

    adjustment_level = 0.2  # Initial dark level

    try:
        while True:
            start_time = time.time()
            ret, frame = cap.read()
            if not ret:
                print("Failed to capture frame.")
                break

            # Process at 720p resolution
            frame_resized = cv2.resize(frame, (target_width, target_height))

            # Detect light condition
            avg_brightness = detect_light_condition(frame_resized)

            # Apply effects
            if avg_brightness < 100:
                adjusted_frame = simulate_night_blindness(frame_resized, adjustment_level)
                adjustment_level = min(1.0, adjustment_level + 0.005)
            else:
                adjusted_frame = frame_resized
                adjustment_level = 0.2  # Reset when back to light

            # Convert for Pygame display
            rgb_frame = cv2.cvtColor(adjusted_frame, cv2.COLOR_BGR2RGB)
            fullscreen_frame = cv2.resize(rgb_frame, (screen_w, screen_h))
            
            # Display in Pygame
            pygame_frame = pygame.surfarray.make_surface(np.rot90(fullscreen_frame))
            screen.blit(pygame_frame, (0, 0))
            pygame.display.flip()

            # Handle exit
            for event in pygame.event.get():
                if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                    raise KeyboardInterrupt

            # Maintain ~30 FPS
            elapsed = time.time() - start_time
            if elapsed < 0.033:  # 30 FPS
                time.sleep(0.033 - elapsed)

            print(f"FPS: {1/(time.time()-start_time):.1f}", end='\r')

    except KeyboardInterrupt:
        print("\nExiting simulation.")
    
    finally:
        cap.release()
        pygame.quit()

if __name__ == "__main__":
    simulate_light_and_dark_conditions()
