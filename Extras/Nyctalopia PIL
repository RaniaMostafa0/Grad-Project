import cv2
import numpy as np
from IPython.display import display, clear_output
from PIL import Image
import time
def separable_gaussian_blur(image, kernel_size, sigma):
    k = cv2.getGaussianKernel(kernel_size, sigma)
    blurred = cv2.filter2D(image, -1, k)  # Blur in X direction
    blurred = cv2.filter2D(blurred, -1, k.T)  # Blur in Y direction
    return blurred
def simulate_night_blindness(image, adjustment_level):
    """Simulate night blindness by darkening and blurring the image."""
    # Darken the image based on the adjustment level
    darkened_image = image * adjustment_level
    darkened_image = np.clip(darkened_image, 0, 255)
    
    # Apply a blur to simulate difficulty seeing clearly in the dark
    blurred_image = separable_gaussian_blur(darkened_image, 31, 10)  # Larger blur kernel for a significant blur effect
    
    return blurred_image.astype(np.uint8)
def detect_light_condition(frame):
    """Detect the average brightness of the frame to simulate light condition (bright or dark)."""
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    avg_brightness = np.mean(gray)
    
    return avg_brightness
def simulate_light_and_dark_conditions():
    # Open the webcam
    cap = cv2.VideoCapture(1)  # Use 0 for the default webcam
    if not cap.isOpened():
        print("Failed to open webcam.")
        return
    # Get the original webcam resolution
    original_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    original_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    # Set target resolution: Height = 720, compute width proportionally
    target_height = 720
    target_width = int((original_width / original_height) * target_height)
    print(f"Target Resolution: {target_width}x{target_height}")
    # Adjustments for simulating night blindness
    adjustment_level = 0.2  # Start with a dark level for night blindness
    print("Press 'Kernel Interrupt' to stop the display.")
    try:
        while True:
            ret, frame = cap.read()
            if not ret:
                print("Failed to capture frame.")
                break
            # Resize frame proportionally to match the 720p height
            frame_resized = cv2.resize(frame, (target_width, target_height))
            # Detect the light condition based on the average brightness of the frame
            avg_brightness = detect_light_condition(frame_resized)
            # Simulate night blindness if the environment is dark (low brightness)
            if avg_brightness < 100:  # Dark condition (simulating low light or night blindness)
                print("In darkness, simulating night blindness.")
                adjusted_frame = simulate_night_blindness(frame_resized, adjustment_level)
                adjustment_level = min(1.0, adjustment_level + 0.005)  # Slowly increase the adjustment level over time
            else:  # Bright environment, show normal vision
                print("In light, normal vision.")
                adjusted_frame = frame_resized  # No adjustment needed
            # Convert to PIL Image for inline display
            img = cv2.cvtColor(adjusted_frame.astype(np.uint8), cv2.COLOR_BGR2RGB)
            pil_img = Image.fromarray(img)
            # Display the image inline in Jupyter Notebook
            clear_output(wait=True)
            display(pil_img)
            # Add delay to approximate 30 FPS
            time.sleep(0.03)
    except KeyboardInterrupt:
        print("Exiting.")
    # Release resources
    cap.release()
simulate_light_and_dark_conditions()
