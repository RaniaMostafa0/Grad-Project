import cv2
import numpy as np
import time
from threading import Thread, Event
from queue import Queue
from PIL import Image
from IPython.display import display, clear_output

def apply_mild_contrast_reduction(image, factor=0.5):
    lab = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)
    l = cv2.addWeighted(l, factor, np.full_like(l, np.mean(l), dtype=np.uint8), 1 - factor, 0)
    reduced_lab = cv2.merge((l, a, b))
    reduced_contrast = cv2.cvtColor(reduced_lab, cv2.COLOR_LAB2BGR)
    return reduced_contrast

def apply_mild_blur(image, kernel_size=(5, 5)):
    return cv2.GaussianBlur(image, kernel_size, 0)

def process_frame(frame):
    flipped_frame = cv2.flip(frame, 1)
    contrast_reduced = apply_mild_contrast_reduction(flipped_frame)
    blurred_frame = apply_mild_blur(contrast_reduced)
    return blurred_frame

def display_frame_in_notebook(frame, max_width=1280, max_height=720):
    height, width = frame.shape[:2]
    scale = min(max_width / width, max_height / height)
    new_width, new_height = int(width * scale), int(height * scale)
    
    resized_frame = cv2.resize(frame, (new_width, new_height))
    frame_rgb = cv2.cvtColor(resized_frame, cv2.COLOR_BGR2RGB)
    pil_image = Image.fromarray(frame_rgb)
    
    clear_output(wait=True)
    display(pil_image)

def video_reader(cap, frame_queue, stop_event):
    while not stop_event.is_set():
        ret, frame = cap.read()
        if not ret:
            stop_event.set()
            break
        
        while not frame_queue.empty():
            frame_queue.get_nowait()
        
        frame_queue.put(frame)

def video_processor(frame_queue, stop_event, max_width=1280, max_height=720):
    try:
        while not stop_event.is_set():
            if not frame_queue.empty():
                frame = frame_queue.get()
                processed_frame = process_frame(frame)
                display_frame_in_notebook(processed_frame, max_width, max_height)
    except KeyboardInterrupt:
        stop_event.set()

def realtime_video_processing():
    cap = cv2.VideoCapture(1)
    if not cap.isOpened():
        print("Failed to open webcam.")
        return
    
    frame_queue = Queue(maxsize=1)
    stop_event = Event()
    
    reader_thread = Thread(target=video_reader, args=(cap, frame_queue, stop_event))
    reader_thread.start()
    
    try:
        video_processor(frame_queue, stop_event)
    except KeyboardInterrupt:
        print("\nExiting real-time video processing.")
    finally:
        stop_event.set()
        reader_thread.join()
        cap.release()

# Run real-time processing
realtime_video_processing()
