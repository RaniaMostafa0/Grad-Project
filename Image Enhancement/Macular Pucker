"""
Macular-Pucker simulator (video version)
────────────────────────────────────────
• Track-bar  “Severity”  controls progression 0 … 1.
• ESC quits, video auto-loops.

pip install opencv-python numpy
"""

import cv2
import numpy as np

# ───────────── user settings ──────────────────────────────────────────
VIDEO_PATH      = r"C:\Users\pc\Downloads\WhatsApp Video 2024-11-30 at 23.04.32_ebe3b33d.mp4"      # ← put your file here
BASE_WAVE_FREQ  = 6        # f(0)  – gentle ripples
DELTA_WAVE_FREQ = 6        # added at slider = 1   →  total 12
RADIUS_FRAC     = 0.60     # affected zone (fraction of half-width)
MAX_SHIFT_PX    = 13.0     # peak pixel displacement
MAX_BLUR_KERNEL = 51       # odd
# ──────────────────────────────────────────────────────────────────────


def main() -> None:
    cap = cv2.VideoCapture(VIDEO_PATH)
    if not cap.isOpened():
        raise RuntimeError(f"❌  Cannot open video: {VIDEO_PATH}")

    # grab first frame to discover geometry
    ok, frame = cap.read()
    if not ok:
        raise RuntimeError("❌  Cannot read a frame from the video.")

    h, w = frame.shape[:2]

    # ── pre-compute static arrays (all float32) ───────────────────────
    grid_x, grid_y = np.meshgrid(
        np.arange(w, dtype=np.float32),
        np.arange(h, dtype=np.float32)
    )

    cx, cy = w * 0.5, h * 0.5
    R = min(cx, cy) * RADIUS_FRAC

    dx, dy = grid_x - cx, grid_y - cy
    r = np.sqrt(dx * dx + dy * dy)
    r_safe = np.where(r == 0, 1, r)        # avoid division by zero

    u = r / R                               # 0-1 radial coordinate
    smooth = np.where(r <= R,
                      (1.0 - u ** 2) ** 2,  # bell-shape fall-off
                      0.0).astype(np.float32)

    # normalised direction vectors (constant)
    ex = np.where(r == 0, 0, dx / r_safe).astype(np.float32)
    ey = np.where(r == 0, 0, dy / r_safe).astype(np.float32)

    # ── simple OpenCV window + slider ────────────────────────────────
    cv2.namedWindow('Macular-Pucker', cv2.WINDOW_NORMAL)
    cv2.createTrackbar('Severity', 'Macular-Pucker', 0, 100, lambda *_: None)

    while True:
        ok, frame = cap.read()
        if not ok:                          # reached the end → loop
            cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
            continue

        t = cv2.getTrackbarPos('Severity', 'Macular-Pucker') / 100.0
        if t < 1e-3:                        # fast path – no effect
            cv2.imshow('Macular-Pucker', frame)
            if cv2.waitKey(1) == 27: break
            continue

        # ── dynamic sine-wave field (freq grows with t) ────────────
        freq = BASE_WAVE_FREQ + DELTA_WAVE_FREQ * t
        wave = smooth * np.sin(u * freq * np.pi).astype(np.float32)

        dir_x = wave * ex
        dir_y = wave * ey

        map_x = grid_x + dir_x * (t * MAX_SHIFT_PX)
        map_y = grid_y + dir_y * (t * MAX_SHIFT_PX)

        warped = cv2.remap(frame, map_x, map_y,
                           interpolation=cv2.INTER_LINEAR,
                           borderMode=cv2.BORDER_REFLECT101)

        # progressive Gaussian blur inside the affected area
        k = 1 + int(t * MAX_BLUR_KERNEL)
        if k % 2 == 0: k += 1
        blurred = cv2.GaussianBlur(warped, (k, k), 0)

        # per-pixel blend: original vs blurred
        mask1 = smooth[..., None]           # to 3-channel
        blended_f = warped.astype(np.float32) * (1.0 - mask1) \
                  + blurred.astype(np.float32) * mask1
        blended = np.clip(blended_f, 0, 255).astype(np.uint8)

        cv2.imshow('Macular-Pucker', blended)
        if cv2.waitKey(1) == 27:            # ESC = quit
            break

    cap.release()
    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()
