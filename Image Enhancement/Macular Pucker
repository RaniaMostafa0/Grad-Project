"""
Macular-Pucker simulator (image version, bi-directional slider, no blur)
───────────────────────────────────────────────────────────────────────
• Slider “Severity” runs 0 … 200 and starts at 100  (normal vision).
      – move right  → positive puckering
      – move left   → inverted puckering
• ESC quits.

Requires:  pip install opencv-python numpy
"""

import cv2
import numpy as np

# ───────────── user settings ──────────────────────────────────────────
IMAGE_PATH      = r"C:\Users\pc\Pictures\akatski.jpg"
# (replace with your image file)
BASE_WAVE_FREQ  = 6     # base sine-wave count at zero severity
DELTA_WAVE_FREQ = 6     # extra waves at full severity → up to 12
RADIUS_FRAC     = 0.60  # affected zone (fraction of half-width)
MAX_SHIFT_PX    = 13.0  # maximum pixel displacement
# ──────────────────────────────────────────────────────────────────────

def main() -> None:
    # load a single image
    img = cv2.imread(IMAGE_PATH)
    if img is None:
        raise RuntimeError(f"❌  Cannot load image: {IMAGE_PATH}")

    h, w = img.shape[:2]

    # ── precompute static geometry (float32) ─────────────────────────
    grid_x, grid_y = np.meshgrid(
        np.arange(w, dtype=np.float32),
        np.arange(h, dtype=np.float32)
    )
    cx, cy = w * 0.5, h * 0.5
    R      = min(cx, cy) * RADIUS_FRAC

    dx, dy = grid_x - cx, grid_y - cy
    r      = np.sqrt(dx * dx + dy * dy)
    r_safe = np.where(r == 0, 1, r)              # avoid division by zero

    u      = (r / R).astype(np.float32)          # 0…1 normalized radius
    smooth = np.where(r <= R,
                      (1.0 - u**2)**2,
                      0.0).astype(np.float32)    # radial fall-off mask

    # unit direction vectors
    ex = np.where(r == 0, 0, dx / r_safe).astype(np.float32)
    ey = np.where(r == 0, 0, dy / r_safe).astype(np.float32)

    # ── OpenCV window + centered trackbar ───────────────────────────
    cv2.namedWindow('Macular-Pucker', cv2.WINDOW_NORMAL)
    CENTER = 100
    cv2.createTrackbar('Severity', 'Macular-Pucker', CENTER, 200, lambda *_: None)

    while True:
        raw   = cv2.getTrackbarPos('Severity', 'Macular-Pucker')
        delta = raw - CENTER                 # −100 … +100
        mag   = abs(delta) / CENTER          # 0 … 1 strength
        sgn   = 1 if delta >= 0 else -1      # direction sign

        if mag < 1e-3:                       # fast path: no distortion
            cv2.imshow('Macular-Pucker', img)
            if cv2.waitKey(1) == 27:
                break
            continue

        # dynamic sine-wave field (frequency grows with |mag|)
        freq = BASE_WAVE_FREQ + DELTA_WAVE_FREQ * mag
        wave = smooth * np.sin(u * freq * np.pi).astype(np.float32)

        dir_x = wave * ex
        dir_y = wave * ey

        # build remap, flipping direction when slider < CENTER
        map_x = grid_x + dir_x * (sgn * mag * MAX_SHIFT_PX)
        map_y = grid_y + dir_y * (sgn * mag * MAX_SHIFT_PX)

        warped = cv2.remap(img, map_x, map_y,
                           interpolation=cv2.INTER_LINEAR,
                           borderMode=cv2.BORDER_REFLECT101)

        # no blur—just show the warped image
        cv2.imshow('Macular-Pucker', warped)
        if cv2.waitKey(1) == 27:
            break

    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()
