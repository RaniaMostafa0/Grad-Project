import cv2
import numpy as np
import time
from IPython.display import display, clear_output
from PIL import Image
import threading
def precompute_blur_mask(shape, downscale_factor=0.5, x_offset=20, y_offset=10):
    """Precompute a static Gaussian blur mask with downscaling and shifted center."""
    h, w = int(shape[0] * downscale_factor), int(shape[1] * downscale_factor)
    
    # Apply offsets to shift the blur center
    center_x, center_y = w // 2 + x_offset, h // 2 + y_offset
    
    y, x = np.ogrid[:h, :w]
    distance_from_center = np.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
    blur_mask = np.exp(-(distance_from_center ** 2) / (2 * (w // 4) ** 2))
    
    return blur_mask.astype(np.float32), downscale_factor
def apply_realistic_macular_pucker_effect(image, blur_mask, downscale_factor):
    """Apply the central blurring effect with downscaling."""
    # Downscale the image and mask for faster processing
    small_image = cv2.resize(image, None, fx=downscale_factor, fy=downscale_factor)
    small_blurred = cv2.GaussianBlur(small_image, (31, 31), 0)  # Smaller kernel for downscaled image
    # Blend the original and blurred images using the mask
    mask_3d = cv2.merge([blur_mask] * 3)  # Convert to 3-channel mask
    blended_small = cv2.convertScaleAbs(
        small_image * (1 - mask_3d) + small_blurred * mask_3d
    )
    # Upscale back to original size
    return cv2.resize(blended_small, (image.shape[1], image.shape[0]))
def display_frame_in_notebook(frame):
    """Display a frame inline in Jupyter Notebook."""
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB for PIL
    pil_image = Image.fromarray(frame_rgb)
    clear_output(wait=True)  # Clear the previous output
    display(pil_image)
def simulate_macular_pucker_webcam():
    # Open the webcam
    cap = cv2.VideoCapture(1)  # Use 0 for the default webcam
    if not cap.isOpened():
        print("Failed to open webcam.")
        return
    print("Press 'Kernel Interrupt' to stop the display.")
    # Precompute the blur mask
    ret, sample_frame = cap.read()
    if not ret:
        print("Failed to capture frame for mask creation.")
        cap.release()
        return
    target_height = 720
    target_width = int(sample_frame.shape[1] * (target_height / sample_frame.shape[0]))
    frame_resized = cv2.resize(sample_frame, (target_width, target_height))
    blur_mask, downscale_factor = precompute_blur_mask(frame_resized.shape, x_offset=70, y_offset=40)
    # Frame processing thread
    processed_frame = None
    processing_done = threading.Event()
    def process_frame(frame):
        """Background thread to process the frame."""
        nonlocal processed_frame
        processed_frame = apply_realistic_macular_pucker_effect(frame, blur_mask, downscale_factor)
        processing_done.set()
    try:
        while True:
            start_time = time.time()
            ret, frame = cap.read()
            if not ret:
                print("Failed to capture frame.")
                break
            # Resize frame to consistent size
            frame_resized = cv2.resize(frame, (target_width, target_height))
            # Start processing in a separate thread
            processing_done.clear()
            thread = threading.Thread(target=process_frame, args=(frame_resized,))
            thread.start()
            # Display previous processed frame if available
            if processing_done.wait(timeout=1 / 30):  # Wait for the previous frame or timeout
                display_frame_in_notebook(processed_frame)
            # Calculate FPS
            end_time = time.time()
            frame_time = end_time - start_time
            fps = 1 / frame_time
            print(f"FPS: {fps:.2f}")
    except KeyboardInterrupt:
        print("Exiting simulation.")
    cap.release()
simulate_macular_pucker_webcam()
