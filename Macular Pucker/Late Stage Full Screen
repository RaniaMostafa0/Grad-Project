import cv2
import numpy as np
import time
import threading
from concurrent.futures import ThreadPoolExecutor
import pygame
from pygame.locals import *

# Precompute blur mask
def precompute_blur_mask(shape, downscale_factor=0.5, x_offset=20, y_offset=10):
    h, w = int(shape[0] * downscale_factor), int(shape[1] * downscale_factor)
    center_x, center_y = w // 2 + x_offset, h // 2 + y_offset
    y, x = np.ogrid[:h, :w]
    distance_from_center = np.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
    blur_mask = np.exp(-(distance_from_center ** 2) / (2 * (w // 3.5) ** 2))
    return blur_mask.astype(np.float32), downscale_factor

# Precompute distortion map
def precompute_distortion_map(shape, x_offset=20, y_offset=10, sine_frequency=4, cosine_frequency=4):
    h, w = shape[:2]
    center_x, center_y = w // 2 + x_offset, h // 2 + y_offset
    radius = min(h, w) // 2.5

    x, y = np.meshgrid(np.arange(w), np.arange(h))
    distance = np.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
    fade_factor = np.clip((radius - distance) / radius, 0, 1)

    distortion_strength_sin, distortion_strength_cos = 1.2, 1.5
    amplitude_x = np.sin(2 * np.pi * (y - center_y) / h * sine_frequency) * 15 * distortion_strength_sin
    amplitude_y = np.cos(2 * np.pi * (x - center_x) / w * cosine_frequency) * 15 * distortion_strength_cos

    distortion_x = amplitude_x * fade_factor
    distortion_y = amplitude_y * fade_factor

    map_x = (x + distortion_x).astype(np.float32)
    map_y = (y + distortion_y).astype(np.float32)
    return map_x, map_y

# Apply distortion and blur effects
def apply_realistic_combined_effect(image, map_x, map_y, blur_mask, downscale_factor):
    distorted_image = cv2.remap(image, map_x, map_y, interpolation=cv2.INTER_LINEAR, borderMode=cv2.BORDER_REFLECT)
    small_image = cv2.resize(distorted_image, None, fx=downscale_factor, fy=downscale_factor)
    small_blurred = cv2.GaussianBlur(small_image, (25, 25), 0)
    small_blurred_resized = cv2.resize(small_blurred, (image.shape[1], image.shape[0]))
    blur_mask_resized = cv2.resize(blur_mask, (image.shape[1], image.shape[0]))
    mask_3d = cv2.merge([blur_mask_resized] * 3)
    blended = distorted_image * (1 - mask_3d) + small_blurred_resized * mask_3d
    return blended.astype(np.uint8)

def simulate_macular_pucker_webcam():
    # Initialize Pygame
    pygame.init()
    screen = pygame.display.set_mode((0, 0), FULLSCREEN)
    pygame.display.set_caption('Macular Pucker Simulation')
    screen_w = pygame.display.Info().current_w
    screen_h = pygame.display.Info().current_h

    # Open webcam
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Failed to open webcam.")
        return

    # Initialize constants
    target_height = 720
    ret, sample_frame = cap.read()
    if not ret:
        print("Failed to capture frame for initialization.")
        cap.release()
        pygame.quit()
        return

    target_width = int(sample_frame.shape[1] * (target_height / sample_frame.shape[0]))
    blur_mask, downscale_factor = precompute_blur_mask((target_height, target_width), x_offset=70, y_offset=40)
    map_x, map_y = precompute_distortion_map((target_height, target_width), x_offset=70, y_offset=40)

    # Threading variables
    processed_frame = None
    processing_lock = threading.Lock()
    latest_frame = None
    running = True

    def processing_thread():
        nonlocal processed_frame, latest_frame, running
        while running:
            with processing_lock:
                if latest_frame is not None:
                    frame = latest_frame.copy()
                    latest_frame = None
                else:
                    time.sleep(0.001)
                    continue
            
            processed = apply_realistic_combined_effect(frame, map_x, map_y, blur_mask, downscale_factor)
            with processing_lock:
                processed_frame = processed

    # Start processing thread
    thread = threading.Thread(target=processing_thread, daemon=True)
    thread.start()

    try:
        while True:
            start_time = time.time()
            
            # Capture frame
            ret, frame = cap.read()
            if not ret:
                print("Failed to capture frame.")
                break

            # Update latest frame
            frame_resized = cv2.resize(frame, (target_width, target_height))
            with processing_lock:
                latest_frame = frame_resized

            # Display processing
            display_frame = None
            with processing_lock:
                if processed_frame is not None:
                    display_frame = processed_frame.copy()

            if display_frame is not None:
                # Convert for Pygame display
                rgb_frame = cv2.cvtColor(display_frame, cv2.COLOR_BGR2RGB)
                fullscreen_frame = cv2.resize(rgb_frame, (screen_w, screen_h))
                
                # Rotate and display
                pygame_frame = pygame.surfarray.make_surface(np.rot90(fullscreen_frame))
                screen.blit(pygame_frame, (0, 0))
                pygame.display.flip()

            # Handle exit events
            for event in pygame.event.get():
                if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                    running = False
                    raise KeyboardInterrupt

            # Maintain FPS
            elapsed = time.time() - start_time
            if elapsed < 0.033:  # ~30 FPS
                time.sleep(0.033 - elapsed)
            
            print(f"FPS: {1/(time.time()-start_time):.1f}", end='\r')

    except KeyboardInterrupt:
        print("\nExiting simulation.")
    
    finally:
        running = False
        cap.release()
        pygame.quit()

if __name__ == "__main__":
    simulate_macular_pucker_webcam()
