import cv2
import numpy as np
from IPython.display import display, clear_output
from PIL import Image
import time


def separable_gaussian_blur(image, kernel_size, sigma):
    """Apply separable Gaussian blur to simulate blurriness."""
    k = cv2.getGaussianKernel(kernel_size, sigma)
    blurred = cv2.filter2D(image, -1, k)  # Blur in X direction
    blurred = cv2.filter2D(blurred, -1, k.T)  # Blur in Y direction
    return blurred


def simulate_night_blindness(image):
    """Simulate severe night blindness for the last stage."""
    # Darken the image significantly (last stage adjustment level)
    darkened_image = image * 0.2  # Severe darkening
    darkened_image = np.clip(darkened_image, 0, 255)
    
    # Apply a heavy blur to simulate severe vision loss
    blurred_image = separable_gaussian_blur(darkened_image, 51, 15)  # Strong blur effect
    return blurred_image.astype(np.uint8)


def detect_light_condition(frame):
    """Detect the average brightness of the frame to simulate light condition (bright or dark)."""
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    avg_brightness = np.mean(gray)
    return avg_brightness


def create_static_irregular_mask(shape, radius_scale=0.5, noise_strength=0.9, edge_fade_size=199):
    """
    Create a static irregular mask for tunnel vision.
    """
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    base_radius = int(min(center_x, center_y) * radius_scale)

    # Create polar coordinates
    y, x = np.ogrid[:rows, :cols]
    angle = np.arctan2(y - center_y, x - center_x)
    distance_from_center = np.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)

    # Generate irregular radii using random perturbations
    random_radii = base_radius * (1 + noise_strength * (np.random.rand(360) - 0.5))
    radius_map = np.interp((np.degrees(angle) + 360) % 360, np.arange(360), random_radii)

    # Create an irregular mask
    irregular_mask = (distance_from_center < radius_map).astype(np.float32)

    # Smooth the edges of the mask
    irregular_mask = cv2.GaussianBlur(irregular_mask, (edge_fade_size, edge_fade_size), 0)

    return irregular_mask


def apply_static_tunnel_vision(image_rgb, static_mask):
    """
    Apply a precomputed static irregular mask to the image.
    """
    # Resize the mask to match the frame size
    resized_mask = cv2.resize(static_mask, (image_rgb.shape[1], image_rgb.shape[0]))

    # Apply the resized mask to the image
    vision_image = np.copy(image_rgb).astype(np.float32)
    for i in range(3):
        vision_image[:, :, i] *= resized_mask

    return vision_image.astype(np.uint8)


def simulate_light_and_dark_conditions():
    # Open the webcam
    cap = cv2.VideoCapture(1)  # Use 0 for the default webcam
    if not cap.isOpened():
        print("Failed to open webcam.")
        return

    print("Press 'Kernel Interrupt' to stop the display.")

    # Generate the static mask once based on the first frame's dimensions
    ret, sample_frame = cap.read()
    if not ret:
        print("Failed to capture frame for mask creation.")
        cap.release()
        return
    static_mask = create_static_irregular_mask(sample_frame.shape[:2], radius_scale=0.5, noise_strength=0.9)

    try:
        while True:
            start_time = time.time()

            ret, frame = cap.read()
            if not ret:
                print("Failed to capture frame.")
                break

            # Resize frame proportionally for display
            target_height = 720
            target_width = int(frame.shape[1] * (target_height / frame.shape[0]))
            frame_resized = cv2.resize(frame, (target_width, target_height))

            # Detect light condition
            avg_brightness = detect_light_condition(frame_resized)

            if avg_brightness < 100:  # Dark condition
                print("In darkness, simulating night blindness with static irregular tunnel vision.")
                # Apply enhanced night blindness
                darkened_frame = simulate_night_blindness(frame_resized)
                # Apply the static irregular tunnel vision
                adjusted_frame = apply_static_tunnel_vision(darkened_frame, static_mask)
            else:  # Light condition, apply only tunnel vision
                print("In light, simulating static irregular tunnel vision.")
                adjusted_frame = apply_static_tunnel_vision(frame_resized, static_mask)

            # Convert to PIL Image for inline display
            img = cv2.cvtColor(adjusted_frame.astype(np.uint8), cv2.COLOR_BGR2RGB)
            pil_img = Image.fromarray(img)

            # Display the image inline
            clear_output(wait=True)
            display(pil_img)

            # Calculate FPS
            end_time = time.time()
            frame_time = end_time - start_time
            fps = 1 / frame_time
            print(f"FPS: {fps:.2f}")  # Print the FPS value

            time.sleep(0.03)  # Add delay for smooth real-time display

    except KeyboardInterrupt:
        print("Exiting simulation.")

    # Release resources
    cap.release()


simulate_light_and_dark_conditions()
