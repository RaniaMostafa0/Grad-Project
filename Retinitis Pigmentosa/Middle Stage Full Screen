import cv2
import numpy as np
import time
import pygame
from pygame.locals import *

def separable_gaussian_blur(image, kernel_size, sigma):
    """Apply Gaussian blur more efficiently."""
    return cv2.GaussianBlur(image, (kernel_size, kernel_size), sigma)

def simulate_night_blindness(image):
    """Simulate moderate night blindness for the middle stage."""
    darkened_image = image * 0.4
    darkened_image = np.clip(darkened_image, 0, 255)
    blurred_image = separable_gaussian_blur(darkened_image, 25, 8)
    return blurred_image.astype(np.uint8)

def detect_light_condition(frame):
    """Detect the average brightness of the frame using the green channel."""
    return np.mean(frame[:, :, 1])

def create_static_irregular_mask(shape, radius_scale=0.9, noise_strength=0.4, edge_fade_size=199):
    """Create a static irregular mask for tunnel vision."""
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    base_radius = int(min(center_x, center_y) * radius_scale)

    y, x = np.ogrid[:rows, :cols]
    angle = np.arctan2(y - center_y, x - center_x)
    distance_from_center = np.sqrt((x - center_x)**2 + (y - center_y)**2)

    random_radii = base_radius * (1 + noise_strength * (np.random.rand(360) - 0.5))
    radius_map = np.interp((np.degrees(angle) + 360) % 360, np.arange(360), random_radii)

    irregular_mask = (distance_from_center < radius_map).astype(np.float32)
    irregular_mask = cv2.GaussianBlur(irregular_mask, (edge_fade_size, edge_fade_size), 0)

    return irregular_mask

def apply_static_tunnel_vision(image_rgb, static_mask):
    """Apply a precomputed static irregular mask to the image."""
    resized_mask = cv2.resize(static_mask, (image_rgb.shape[1], image_rgb.shape[0]))
    vision_image = np.copy(image_rgb).astype(np.float32)
    for i in range(3):
        vision_image[:, :, i] *= resized_mask
    return vision_image.astype(np.uint8)

def simulate_light_and_dark_conditions():
    # Initialize Pygame
    pygame.init()
    screen = pygame.display.set_mode((0, 0), FULLSCREEN)
    pygame.display.set_caption('Night Vision Simulation')
    screen_w = pygame.display.Info().current_w
    screen_h = pygame.display.Info().current_h

    # Open webcam and set resolution
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Failed to open webcam.")
        return

    # Set webcam to 720p
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

    # Generate static mask
    ret, sample_frame = cap.read()
    if not ret:
        print("Failed to capture frame for mask creation.")
        cap.release()
        pygame.quit()
        return

    static_mask = create_static_irregular_mask(sample_frame.shape[:2], radius_scale=0.9, noise_strength=0.7)
    static_mask_resized = cv2.resize(static_mask, (sample_frame.shape[1], sample_frame.shape[0]))

    try:
        while True:
            start_time = time.time()
            ret, frame = cap.read()
            if not ret:
                print("Failed to capture frame.")
                break

            # Process at 720p resolution
            target_height = 720
            target_width = 1280  # Fixed width for 720p
            frame_resized = cv2.resize(frame, (target_width, target_height))

            # Apply effects
            avg_brightness = detect_light_condition(frame_resized)
            if avg_brightness < 100:
                processed_frame = simulate_night_blindness(frame_resized)
                adjusted_frame = apply_static_tunnel_vision(processed_frame, static_mask_resized)
            else:
                adjusted_frame = apply_static_tunnel_vision(frame_resized, static_mask_resized)

            # Convert for Pygame display
            rgb_frame = cv2.cvtColor(adjusted_frame, cv2.COLOR_BGR2RGB)

            # Maintain aspect ratio
            aspect_ratio = target_width / target_height
            new_height = int(screen_w / aspect_ratio)
            if new_height > screen_h:
                new_height = screen_h
                new_width = int(screen_h * aspect_ratio)
            else:
                new_width = screen_w

            resized_frame = cv2.resize(rgb_frame, (new_width, new_height))

            # Center the frame
            x_offset = (screen_w - new_width) // 2
            y_offset = (screen_h - new_height) // 2

            # Display in Pygame
            pygame_frame = pygame.surfarray.make_surface(np.rot90(resized_frame))
            screen.blit(pygame_frame, (x_offset, y_offset))
            pygame.display.flip()

            # Handle exit
            for event in pygame.event.get():
                if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                    raise KeyboardInterrupt

            # Print FPS
            fps = 1 / (time.time() - start_time)
            print(f"FPS: {fps:.1f}", end='\r')

    except KeyboardInterrupt:
        print("\nExiting simulation.")
    
    finally:
        cap.release()
        pygame.quit()

if __name__ == "__main__":
    simulate_light_and_dark_conditions()
