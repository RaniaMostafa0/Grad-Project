import cv2
import numpy as np
import time
import pygame
from pygame.locals import *
# Enable GPU acceleration in OpenCV
cv2.setUseOptimized(True)
cv2.ocl.setUseOpenCL(True)
def apply_glare(image, mask, glare_intensity=150.0):
    """Apply glare effect by blending the original image with the mask."""
    return cv2.addWeighted(image, 1, mask, glare_intensity / 255.0, 0)
def separable_gaussian_blur(image, kernel_size, sigma):
    """Applies separable Gaussian blur to the input image."""
    gaussian_1d = cv2.getGaussianKernel(kernel_size, sigma)
    return cv2.sepFilter2D(image, -1, gaussian_1d, gaussian_1d.T)
def create_stargardt_mask(shape):
    """Create a Stargardt mask with organic extensions and smooth fading."""
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    y, x = np.meshgrid(np.arange(rows), np.arange(cols), indexing="ij")
    distance = np.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
    # Define base radii for black and fading regions
    inner_radius = 80
    outer_radius = 130
    # Generate base mask with radial gradient
    mask = np.zeros_like(distance, dtype=np.float32)
    mask[distance <= inner_radius] = 1  # Fully black inside inner radius
    fading_region = (distance > inner_radius) & (distance <= outer_radius)
    mask[fading_region] = 1 - (distance[fading_region] - inner_radius) / (outer_radius - inner_radius)
    # Add random extensions around the edges
    num_extensions = 120
    max_extension_length = 45
    for _ in range(num_extensions):
        angle = np.random.uniform(0, 2 * np.pi)
        extension_length = np.random.uniform(inner_radius, inner_radius + max_extension_length)
        extension_x = int(center_x + extension_length * np.cos(angle))
        extension_y = int(center_y + extension_length * np.sin(angle))
        cv2.circle(mask, (extension_x, extension_y), radius=10, color=1, thickness=-1)
    # Smooth and pixelate the mask
    smoothed_mask = separable_gaussian_blur(mask, kernel_size=61, sigma=30)
    block_size = 10
    pixelated_mask = cv2.resize(smoothed_mask, 
                               (cols // block_size, rows // block_size), 
                               interpolation=cv2.INTER_AREA)
    pixelated_mask = cv2.resize(pixelated_mask, (cols, rows), 
                               interpolation=cv2.INTER_NEAREST)
    final_mask = separable_gaussian_blur(pixelated_mask, kernel_size=51, sigma=20)
    return final_mask
def process_frame(frame, stargardt_mask):
    """Applies glare and Stargardt simulation using a static mask."""
    gray_image = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    _, bright_areas = cv2.threshold(gray_image, 200, 255, cv2.THRESH_BINARY)
    bright_mask = cv2.merge([bright_areas, bright_areas, bright_areas])
    glare_image = apply_glare(frame, bright_mask)
    final_image_with_glare = cv2.addWeighted(frame, 1, glare_image, 0.4, 0)
    faded_spot = (final_image_with_glare * (1 - stargardt_mask[..., np.newaxis])).astype(np.uint8)
    return faded_spot
def simulate_realtime_processing():
    """Main processing loop with Pygame fullscreen display."""
    # Initialize Pygame
    pygame.init()
    screen = pygame.display.set_mode((0, 0), FULLSCREEN)
    pygame.display.set_caption('Stargardt Simulation')
    screen_w = pygame.display.Info().current_w
    screen_h = pygame.display.Info().current_h
    # Initialize webcam
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Failed to open webcam.")
        return
    # Create Stargardt mask
    ret, sample_frame = cap.read()
    if not ret:
        print("Failed to capture frame for mask creation.")
        cap.release()
        pygame.quit()
        return
    stargardt_mask = create_stargardt_mask(sample_frame.shape[:2])
    try:
        while True:
            start_time = time.time()
            
            # Capture frame
            ret, frame = cap.read()
            if not ret:
                print("Failed to capture frame.")
                break
            # Process frame
            processed_frame = process_frame(frame, stargardt_mask)
            # Pygame display conversion
            rgb_frame = cv2.cvtColor(processed_frame, cv2.COLOR_BGR2RGB)
            resized_frame = cv2.resize(rgb_frame, (screen_w, screen_h))
            
            # Rotate and convert to Pygame surface
            pygame_frame = pygame.surfarray.make_surface(np.rot90(resized_frame))
            screen.blit(pygame_frame, (0, 0))
            pygame.display.flip()
            # FPS calculation
            fps = 1 / (time.time() - start_time)
            print(f"FPS: {fps:.1f}", end='\r')
            # Event handling
            for event in pygame.event.get():
                if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                    raise KeyboardInterrupt
    except KeyboardInterrupt:
        print("\nExiting simulation.")
    
    finally:
        cap.release()
        pygame.quit()
if __name__ == "__main__":
    simulate_realtime_processing()
