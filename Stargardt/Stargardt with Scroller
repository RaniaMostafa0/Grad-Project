import cv2
import numpy as np
import pygame
from threading import Thread, Event
from queue import Queue

# Slider settings
SLIDER_HEIGHT = 20
SLIDER_COLOR = (100, 100, 100)
THUMB_COLOR = (200, 200, 200)
THUMB_WIDTH = 40

def create_stargardt_mask(shape, severity):
    """Generate a progressive black spot effect for Stargardt disease."""
    rows, cols = shape[:2]
    
    # Define center
    center_x, center_y = cols // 2, rows // 2
    
    # Generate a distance map
    y, x = np.meshgrid(np.arange(rows), np.arange(cols), indexing="ij")
    distance = np.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
    
    # Control the spot growth
    min_radius = 1
    max_radius = min(rows, cols) // 3  # Maximum radius of black spot
    current_radius = int(min_radius + severity * (max_radius - min_radius))
    
    mask = np.zeros_like(distance, dtype=np.float32)
    
    # Apply full black inside the central region
    mask[distance <= current_radius] = 1
    
    # Gradual fading effect outward
    fade_start = current_radius
    fade_end = int(current_radius * 1.3)  # Slightly larger for gradual blur
    fading_region = (distance > fade_start) & (distance <= fade_end)
    mask[fading_region] = 1 - (distance[fading_region] - fade_start) / (fade_end - fade_start)
    
    return cv2.GaussianBlur(mask, (35, 35), 15)

def apply_stargardt_effect(frame, severity):
    """Apply the black central spot with smooth progression."""
    if severity == 0:
        return frame  # No effect when severity is zero
    
    mask = create_stargardt_mask(frame.shape, severity)
    return (frame * (1 - mask[..., np.newaxis])).astype(np.uint8)

def display_frame_with_slider(frame, screen, slider_pos, max_slider_pos):
    """Render the frame with the slider overlay."""
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    frame_surface = pygame.surfarray.make_surface(np.rot90(frame_rgb))
    screen.blit(frame_surface, (0, 0))
    
    # Draw slider bar
    pygame.draw.rect(screen, SLIDER_COLOR, (0, screen.get_height() - SLIDER_HEIGHT, screen.get_width(), SLIDER_HEIGHT))
    pygame.draw.rect(screen, THUMB_COLOR, (slider_pos, screen.get_height() - SLIDER_HEIGHT, THUMB_WIDTH, SLIDER_HEIGHT))
    
    pygame.display.flip()

def video_reader(cap, frame_queue, stop_event):
    """Capture video frames asynchronously."""
    while not stop_event.is_set():
        ret, frame = cap.read()
        if not ret:
            stop_event.set()
            break
        frame_queue.put(frame)

def video_processor(frame_queue, stop_event, screen):
    """Process frames and apply effects dynamically."""
    slider_pos = 0
    max_slider_pos = screen.get_width() - THUMB_WIDTH
    dragging = False
    
    while not stop_event.is_set() or not frame_queue.empty():
        for event in pygame.event.get():
            if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
                stop_event.set()
                break
            elif event.type == pygame.MOUSEBUTTONDOWN and screen.get_height() - SLIDER_HEIGHT <= event.pos[1]:
                dragging = True
            elif event.type == pygame.MOUSEBUTTONUP:
                dragging = False
            elif event.type == pygame.MOUSEMOTION and dragging:
                slider_pos = max(0, min(event.pos[0] - THUMB_WIDTH // 2, max_slider_pos))

        if not frame_queue.empty():
            frame = frame_queue.get()
            severity = slider_pos / max_slider_pos
            
            # Apply effect with gradual appearance
            processed_frame = apply_stargardt_effect(frame, severity)
            display_frame_with_slider(processed_frame, screen, slider_pos, max_slider_pos)

def realtime_video_processing():
    """Main function to start video processing with optimizations."""
    cap = cv2.VideoCapture(0)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)  
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
    if not cap.isOpened():
        print("Failed to open webcam.")
        return

    pygame.init()
    screen = pygame.display.set_mode((1280, 720), pygame.FULLSCREEN)
    pygame.display.set_caption("Progressive Stargardt Simulation")

    frame_queue = Queue(maxsize=5)  # Small queue to reduce lag
    stop_event = Event()

    reader_thread = Thread(target=video_reader, args=(cap, frame_queue, stop_event))
    reader_thread.start()

    try:
        video_processor(frame_queue, stop_event, screen)
    finally:
        stop_event.set()
        reader_thread.join()
        cap.release()
        pygame.quit()

realtime_video_processing()
