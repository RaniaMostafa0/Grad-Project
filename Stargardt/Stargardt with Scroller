import cv2
import numpy as np
import time
import pygame
from pygame.locals import *

# Enable GPU acceleration in OpenCV
cv2.setUseOptimized(True)
cv2.ocl.setUseOpenCL(True)

def apply_glare(image, mask, glare_intensity=150.0):
    """Apply glare effect by blending the original image with the mask."""
    return cv2.addWeighted(image, 1, mask, glare_intensity / 255.0, 0)

def separable_gaussian_blur(image, kernel_size, sigma):
    """Applies separable Gaussian blur to the input image."""
    gaussian_1d = cv2.getGaussianKernel(kernel_size, sigma)
    return cv2.sepFilter2D(image, -1, gaussian_1d, gaussian_1d.T)

def create_stargardt_mask(shape, intensity=0.0):
    """Create an irregular central vision loss mask that increases in size."""
    rows, cols = shape
    center_x, center_y = cols // 2, rows // 2
    mask = np.zeros((rows, cols), dtype=np.float32)
    
    # Ensure minimum values to prevent errors
    min_radius = 20
    max_radius = max(int(300 * intensity), min_radius)  
    min_irregularity = 5
    irregularity = max(int(50 * intensity), min_irregularity)
    
    for _ in range(30):  
        offset_x = np.random.randint(-irregularity, irregularity + 1)
        offset_y = np.random.randint(-irregularity, irregularity + 1)
        radius = np.random.randint(max_radius // 2, max_radius + 1)
        cv2.circle(mask, (center_x + offset_x, center_y + offset_y), radius, 1, -1)
    
    blurred_mask = separable_gaussian_blur(mask, kernel_size=51, sigma=20)
    return blurred_mask

def process_frame(frame, stargardt_mask):
    """Applies glare and Stargardt simulation using a static mask."""
    faded_spot = (frame * (1 - stargardt_mask[..., np.newaxis])).astype(np.uint8)
    return faded_spot

def simulate_realtime_processing():
    """Main processing loop with Pygame fullscreen display."""
    cap = cv2.VideoCapture(0)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
    if not cap.isOpened():
        print("Failed to open webcam.")
        return
    
    pygame.init()
    screen = pygame.display.set_mode((0, 0), FULLSCREEN)
    screen_w = pygame.display.Info().current_w
    screen_h = pygame.display.Info().current_h
    
    slider_x = 50
    slider_y = screen_h - 50
    slider_width = screen_w - 100
    slider_height = 20
    slider_pos = 0  # Initial position (0% intensity)
    
    try:
        while True:
            start_time = time.time()
            ret, frame = cap.read()
            if not ret:
                print("Failed to capture frame.")
                break
            
            intensity = slider_pos / slider_width
            stargardt_mask = create_stargardt_mask(frame.shape[:2], intensity)
            processed_frame = process_frame(frame, stargardt_mask)
            
            resized_frame = cv2.resize(processed_frame, (screen_w, screen_h))
            rgb_frame = cv2.cvtColor(resized_frame, cv2.COLOR_BGR2RGB)
            pygame_frame = pygame.surfarray.make_surface(np.rot90(rgb_frame))
            screen.blit(pygame_frame, (0, 0))
            
            pygame.draw.rect(screen, (255, 255, 255), (slider_x, slider_y, slider_width, slider_height), 2)
            pygame.draw.rect(screen, (255, 0, 0), (slider_x, slider_y, slider_pos, slider_height))
            pygame.display.flip()
            
            fps = 1 / (time.time() - start_time)
            print(f"FPS: {fps:.1f}", end='\r')
            
            for event in pygame.event.get():
                if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                    raise KeyboardInterrupt
                elif event.type == MOUSEBUTTONDOWN:
                    if slider_x <= event.pos[0] <= slider_x + slider_width and slider_y <= event.pos[1] <= slider_y + slider_height:
                        slider_pos = event.pos[0] - slider_x
                elif event.type == MOUSEMOTION:
                    if event.buttons[0]:
                        if slider_x <= event.pos[0] <= slider_x + slider_width:
                            slider_pos = event.pos[0] - slider_x
    
    except KeyboardInterrupt:
        print("\nExiting simulation.")
    
    finally:
        cap.release()
        pygame.quit()

if __name__ == "__main__":
    simulate_realtime_processing()
